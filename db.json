{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/tcpip1.png","path":"img/tcpip1.png","modified":0,"renderable":0},{"_id":"source/img/tcpip2.png","path":"img/tcpip2.png","modified":0,"renderable":0},{"_id":"source/img/tcpip3.png","path":"img/tcpip3.png","modified":0,"renderable":0},{"_id":"source/img/tcpip4.png","path":"img/tcpip4.png","modified":0,"renderable":0},{"_id":"source/img/tcpip5.png","path":"img/tcpip5.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1499098316000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1499098316000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1499098316000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1499098316000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1499098316000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1499098316000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1499098316000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1499098316000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1499098316000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1499098316000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1499098316000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1499098316000},{"_id":"themes/next/_config.yml","hash":"6971014bcce0f09fa47b9d10abf89d56e5dde567","modified":1500895767408},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1499098316000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1499098316000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1499098316000},{"_id":"source/_posts/My-Gallery.md","hash":"314de8402efe38992d15700f9365bfff6ce46e6a","modified":1500973308928},{"_id":"source/_posts/关于单例模式.md","hash":"532901f6d1b6eae7ebc9d3ff8f80959bd5d7a697","modified":1500000365568},{"_id":"source/_posts/可重入锁.md","hash":"a8237a3490b48901fb38b46d49edc4662adea810","modified":1500000386548},{"_id":"source/_posts/奇怪的空格.md","hash":"6453096040d30a77722a4cf8adfc5222930b1346","modified":1500026613122},{"_id":"source/_posts/搬家.md","hash":"7ae0fea6a6da54ca154d566b51c03ccdce690147","modified":1500370011916},{"_id":"source/_posts/数据库事务隔离级别.md","hash":"7015f8d496d1bea85f463eb5d17be8c99b8f8627","modified":1500000414186},{"_id":"source/about/index.md","hash":"242bcf020ea1a79f2c2e352ff4648d4fd6593ac9","modified":1499098316000},{"_id":"source/book/index.md","hash":"7baae28f6447b19865989a76452269800f05e642","modified":1499098316000},{"_id":"source/img/tcpip1.png","hash":"7cc61dd537926f7e8da6396dc849ff4d6901c246","modified":1499098316000},{"_id":"source/img/tcpip2.png","hash":"2fa65c2e3bb60a370eff4333f86d15bfe48ef524","modified":1499098316000},{"_id":"source/photo/index.md","hash":"6cb3f7ea015ee5e4bc8c56453eec45f0aa0859d7","modified":1500974389175},{"_id":"source/tags/index.md","hash":"b38e9ae74e78065f2f8425f6ed5731d9cd8fa01f","modified":1499098316000},{"_id":"source/categories/index.md","hash":"98f064ffaf56108bcc82027314dd275f1c339157","modified":1499098316000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1499098316000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1499098316000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1499098316000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1499098316000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1499098316000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1499098316000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1499098316000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1499098316000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1499098316000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1499098316000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5a577c693bed885aa5db05fc8c9a84fa6455b399","modified":1500895589252},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1499098316000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1499098316000},{"_id":"themes/next/layout/_layout.swig","hash":"909d68b164227fe7601d82e2303bf574eb754172","modified":1499098316000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1499098316000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1499098316000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1499098316000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1499098316000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1499098316000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1499098316000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1499098316000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1499098316000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1499098316000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1499098316000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1499098316000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1499098316000},{"_id":"source/img/tcpip3.png","hash":"b31f196294d5b28f496b5316f7e088421f6201a9","modified":1499098316000},{"_id":"source/img/tcpip4.png","hash":"f7dda909f8094290b8c4b6e5e8c10e1ac6937681","modified":1499098316000},{"_id":"source/img/tcpip5.png","hash":"88d478187b348ae03d77c6bc941af913ebd8ea4f","modified":1499098316000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499098316000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499098316000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499098316000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1499098316000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1499098316000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1499098316000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1499098316000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1499098316000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1499098316000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1499098316000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1499098316000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1499098316000},{"_id":"themes/next/layout/_macro/post.swig","hash":"640b431eccbbd27f10c6781f33db5ea9a6e064de","modified":1499098316000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1499098316000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1499098316000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1499098316000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1499098316000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1499098316000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1499098316000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1499098316000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1499098316000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1499098316000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1499098316000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1499098316000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1499098316000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1499098316000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1499098316000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1499098316000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1499098316000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1499098316000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1499098316000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499098316000},{"_id":"themes/next/source/images/avatar.jpg","hash":"256b91176aa569baf1182fc208666ded80ad0e1d","modified":1463797546589},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1499098316000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1499098316000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1499098316000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1499098316000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1499098316000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1499098316000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1499098316000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499098316000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1499098316000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1499098316000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499098316000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499098316000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499098316000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499098316000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499098316000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499098316000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499098316000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499098316000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499098316000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1499098316000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1499098316000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1499098316000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1499098316000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1499098316000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1499098316000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1499098316000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1499098316000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1499098316000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1499098316000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1499098316000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1499098316000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1499098316000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1499098316000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1499098316000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1499098316000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1499098316000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1499098316000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1499098316000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1499098316000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1499098316000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1499098316000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1499098316000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1499098316000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1499098316000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1499098316000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1499098316000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1499098316000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1499098316000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1499098316000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1499098316000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1499098316000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1499098316000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1499098316000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1499098316000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1499098316000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1499098316000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1499098316000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1499098316000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499098316000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1499098316000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1499098316000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1499098316000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1499098316000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1499098316000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1499098316000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1499098316000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1499098316000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1499098316000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1499098316000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1499098316000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1499098316000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1499098316000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1499098316000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1499098316000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1499098316000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1499098316000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1499098316000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499098316000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1499098316000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1499098316000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1499098316000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1499098316000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1499098316000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1499098316000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1499098316000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499098316000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1499098316000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1499098316000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1499098316000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1499098316000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1499098316000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1499098316000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499098316000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499098316000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1499098316000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1499098316000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1499098316000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1499098316000},{"_id":"public/book/index.html","hash":"5a2e4157fd1f3e5dee479c207c6bc516d03d4aeb","modified":1500957063130},{"_id":"public/photo/index.html","hash":"461a455c295f63aa1c6283eda19d9b12145e291a","modified":1500957063130},{"_id":"public/tags/index.html","hash":"dc3cd204e134c9566709683cdfcbb79ce8b96a89","modified":1500957063130},{"_id":"public/categories/index.html","hash":"24f64365e4ce097f2897051f0a05a748dd583024","modified":1500957063131},{"_id":"public/about/index.html","hash":"bb80ade51c4d34632c9d398e0dc907177b8b71b7","modified":1500957063131},{"_id":"public/2017/07/21/My-Gallery/index.html","hash":"1dccd35f9aefade4b57ba1602d70580b5b7d8a25","modified":1500957063131},{"_id":"public/archives/index.html","hash":"65dc5182b99637b64793fb4f687422c98cb7b806","modified":1500957063131},{"_id":"public/archives/2016/index.html","hash":"38accf1391aef573c084efe904a9526234094052","modified":1500957063131},{"_id":"public/archives/2016/12/index.html","hash":"0c96f4d56103606e43e55ef104abe59a7399861f","modified":1500957063131},{"_id":"public/archives/2017/index.html","hash":"3041201daac1f158d1b05604f64f249e1442a83b","modified":1500957063131},{"_id":"public/archives/2017/01/index.html","hash":"74a9c4646ac274d7f80058be2cfb13d426c4b401","modified":1500957063131},{"_id":"public/archives/2017/02/index.html","hash":"4d095c9a6ee306a6608f1bc00ba3c308f36fbd59","modified":1500957063131},{"_id":"public/archives/2017/07/index.html","hash":"532a602bced66a765883cc73d6d1930b20c91c9e","modified":1500957063131},{"_id":"public/categories/设计模式/index.html","hash":"0a7ada880d20eec41b102c40786a34e620160081","modified":1500957063131},{"_id":"public/categories/技术拾遗/index.html","hash":"7ec4826125c43ebcd31b3232929cbe8afe8ec103","modified":1500957063131},{"_id":"public/categories/并发编程/index.html","hash":"8df028e23d5197cf4947d30c38ca00ea7d341cec","modified":1500957063131},{"_id":"public/categories/心情随笔/index.html","hash":"e33c71f0ae3f90c2f60480cedec27a7153ffb890","modified":1500957063131},{"_id":"public/categories/数据库/index.html","hash":"c98dda000b4b7d0ab1216de807b6c4aae5fa98ad","modified":1500957063131},{"_id":"public/tags/单例/index.html","hash":"4abdddd3b42455003c81e96f6c3801b16abb105d","modified":1500957063131},{"_id":"public/tags/特殊字符/index.html","hash":"f81dac6279f874a5cc1b2e700a4ba0cdd176aa16","modified":1500957063131},{"_id":"public/tags/锁/index.html","hash":"2a380ce0a4a3478ca530deedade61c80731ec9c2","modified":1500957063131},{"_id":"public/tags/数据库/index.html","hash":"c1592ebff6623ca977e406f36d8b49e63e8a863b","modified":1500957063131},{"_id":"public/tags/事务/index.html","hash":"67d40c55edaacd90123c98fbbaebfd961f2ffcd6","modified":1500957063131},{"_id":"public/2017/07/14/搬家/index.html","hash":"87a960f357ad0d7514f5edea4b7a76fd3cb2db1a","modified":1500957063131},{"_id":"public/2017/07/13/奇怪的空格/index.html","hash":"7d73bc4e7fb87fb985d10821ac501ce9502ac316","modified":1500957063131},{"_id":"public/2017/02/04/可重入锁/index.html","hash":"066f8ce11f05a27bab005afa37d5625647516be7","modified":1500957063132},{"_id":"public/2017/01/05/数据库事务隔离级别/index.html","hash":"f9ee5b9ef10fc3449b4e8e61e9742a940b72d321","modified":1500957063132},{"_id":"public/2016/12/13/关于单例模式/index.html","hash":"0730af2a8fdccc7cfd4c8a2dc9cc42ec4915f328","modified":1500957063132},{"_id":"public/index.html","hash":"62f1317c33db3f1b192e67413351a404fe147f79","modified":1500957063132},{"_id":"public/img/tcpip1.png","hash":"7cc61dd537926f7e8da6396dc849ff4d6901c246","modified":1500957063152},{"_id":"public/img/tcpip2.png","hash":"2fa65c2e3bb60a370eff4333f86d15bfe48ef524","modified":1500957063157},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1500957063157},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1500957063157},{"_id":"public/images/avatar.jpg","hash":"256b91176aa569baf1182fc208666ded80ad0e1d","modified":1500957063157},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1500957063157},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1500957063157},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1500957063157},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1500957063157},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1500957063158},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1500957063158},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500957063158},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1500957063158},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1500957063158},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1500957063158},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500957063158},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1500957063158},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1500957063158},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1500957063158},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1500957063158},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1500957063158},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1500957063158},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1500957063158},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1500957063158},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1500957063158},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1500957063158},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1500957063158},{"_id":"public/img/tcpip3.png","hash":"b31f196294d5b28f496b5316f7e088421f6201a9","modified":1500957063761},{"_id":"public/img/tcpip4.png","hash":"f7dda909f8094290b8c4b6e5e8c10e1ac6937681","modified":1500957063763},{"_id":"public/img/tcpip5.png","hash":"88d478187b348ae03d77c6bc941af913ebd8ea4f","modified":1500957063769},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1500957063769},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1500957063769},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1500957063775},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1500957063775},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1500957063775},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1500957063775},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1500957063776},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1500957063776},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1500957063776},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1500957063776},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1500957063776},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1500957063776},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1500957063776},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1500957063776},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1500957063776},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1500957063776},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1500957063776},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1500957063776},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1500957063776},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1500957063776},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1500957063776},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1500957063776},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1500957063776},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1500957063777},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1500957063777},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1500957063777},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1500957063777},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1500957063777},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1500957063777},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1500957063777},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1500957063777},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1500957063777},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1500957063777},{"_id":"public/css/main.css","hash":"90199f938df5e37d2e32adfe762b506bdb810508","modified":1500957063777},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1500957063778},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1500957063778},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1500957063778},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500957063778},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1500957063778},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1500957063778},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500957063778},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1500957063778},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1500957063778},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1500957063778},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1500957063778},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1500957063778},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1500957063778},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1500957063779},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1500957063779},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1500957063797},{"_id":"themes/next/source/js/src/jquery.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1500965789158},{"_id":"source/_posts/Concrete Jungle.md","hash":"3816dbc11d34bb50388d9a855f974e6559570218","modified":1500973300846},{"_id":"source/photo/jquery.fancybox.css","hash":"2e8ca5ddbf60503e02d87800764e2422dc670072","modified":1500974383911},{"_id":"source/photo/photo.css","hash":"e972a8d6ecc572157092fcb839670ab10c8ed36c","modified":1500977251021},{"_id":"source/photo/photo.js","hash":"e0cada9cd88bcdda9bd4a2fee3d2f49bd57d3dd1","modified":1500974434884}],"Category":[{"name":"设计模式","_id":"cj5j32wrf0004rkhkabuvanxf"},{"name":"技术拾遗","_id":"cj5j32wrm0008rkhkyn1ftwby"},{"name":"并发编程","_id":"cj5j32wrn000crkhkgzj3oavs"},{"name":"心情随笔","_id":"cj5j32wro000frkhktbdddu3b"},{"name":"数据库","_id":"cj5j32wwh000nrkhkq4k94nal"}],"Data":[],"Page":[{"title":"book","date":"2016-05-24T12:14:09.000Z","comments":0,"_content":"","source":"book/index.md","raw":"---\ntitle: book\ndate: 2016-05-24 20:14:09\ncomments: false\n---\n","updated":"2017-07-03T16:11:56.000Z","path":"book/index.html","layout":"page","_id":"cj5j32wwc000krkhke91pgdei","content":"","excerpt":"","more":""},{"_content":"<head><link rel=\"stylesheet\" type=\"text/css\" href=\"photo.css\" /><link type=\"text/css\" href=\"jquery.fancybox.css\" rel=\"stylesheet\"></head>\n<ul id=\"wrap\"></ul>\n<script src=\"photo.js\"></script>\n","source":"photo/index.md","raw":"<head><link rel=\"stylesheet\" type=\"text/css\" href=\"photo.css\" /><link type=\"text/css\" href=\"jquery.fancybox.css\" rel=\"stylesheet\"></head>\n<ul id=\"wrap\"></ul>\n<script src=\"photo.js\"></script>\n","date":"2017-07-25T09:19:49.175Z","updated":"2017-07-25T09:19:49.175Z","path":"photo/index.html","_id":"cj5j32wwf000lrkhkny2o972d","title":"","comments":1,"layout":"page","content":"<p><head><link rel=\"stylesheet\" type=\"text/css\" href=\"photo.css\"><link type=\"text/css\" href=\"jquery.fancybox.css\" rel=\"stylesheet\"></head></p>\n<p><ul id=\"wrap\"></ul></p>\n<script src=\"photo.js\"></script>\n","excerpt":"","more":"<p><head><link rel=\"stylesheet\" type=\"text/css\" href=\"photo.css\" /><link type=\"text/css\" href=\"jquery.fancybox.css\" rel=\"stylesheet\"></head></p>\n<p><ul id=\"wrap\"></ul></p>\n<script src=\"photo.js\"></script>\n"},{"title":"tags","date":"2016-05-26T11:28:37.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-26 19:28:37\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-07-03T16:11:56.000Z","path":"tags/index.html","layout":"page","_id":"cj5j32wwh000orkhkelotfygo","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-05-26T11:36:55.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-05-26 19:36:55\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-07-03T16:11:56.000Z","path":"categories/index.html","layout":"page","_id":"cj5j32wwi000prkhkye34b285","content":"","excerpt":"","more":""},{"title":"about","date":"2016-05-24T12:14:09.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-05-24 20:14:09\ncomments: false\n---\n","updated":"2017-07-03T16:11:56.000Z","path":"about/index.html","layout":"page","_id":"cj5j32wwj000rrkhky557u2vw","content":"","excerpt":"","more":""},{"_content":"/*! fancyBox v2.1.5 fancyapps.com | fancyapps.com/fancybox/#license */\n.fancybox-wrap,\n.fancybox-skin,\n.fancybox-outer,\n.fancybox-inner,\n.fancybox-image,\n.fancybox-wrap iframe,\n.fancybox-wrap object,\n.fancybox-nav,\n.fancybox-nav span,\n.fancybox-tmp\n{\n    padding: 0;\n    margin: 0;\n    border: 0;\n    outline: none;\n    vertical-align: top;\n}\n\n.fancybox-wrap {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 8020;\n}\n\n.fancybox-skin {\n    position: relative;\n    background: #f9f9f9;\n    color: #444;\n    text-shadow: none;\n    -webkit-border-radius: 4px;\n       -moz-border-radius: 4px;\n            border-radius: 4px;\n}\n\n.fancybox-opened {\n    z-index: 8030;\n}\n\n.fancybox-opened .fancybox-skin {\n    -webkit-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n       -moz-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n}\n\n.fancybox-outer, .fancybox-inner {\n    position: relative;\n}\n\n.fancybox-inner {\n    overflow: hidden;\n}\n\n.fancybox-type-iframe .fancybox-inner {\n    -webkit-overflow-scrolling: touch;\n}\n\n.fancybox-error {\n    color: #444;\n    font: 14px/20px \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    margin: 0;\n    padding: 15px;\n    white-space: nowrap;\n}\n\n.fancybox-image, .fancybox-iframe {\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n\n.fancybox-image {\n    max-width: 100%;\n    max-height: 100%;\n}\n\n#fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n    background-image: url('fancybox_sprite.png');\n}\n\n#fancybox-loading {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    margin-top: -22px;\n    margin-left: -22px;\n    background-position: 0 -108px;\n    opacity: 0.8;\n    cursor: pointer;\n    z-index: 8060;\n}\n\n#fancybox-loading div {\n    width: 44px;\n    height: 44px;\n    background: url('fancybox_loading.gif') center center no-repeat;\n}\n\n.fancybox-close {\n    position: absolute;\n    top: -18px;\n    right: -18px;\n    width: 36px;\n    height: 36px;\n    cursor: pointer;\n    z-index: 8040;\n}\n\n.fancybox-nav {\n    position: absolute;\n    top: 0;\n    width: 40%;\n    height: 100%;\n    cursor: pointer;\n    text-decoration: none;\n    background: transparent url('blank.gif'); /* helps IE */\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    z-index: 8040;\n}\n\n.fancybox-prev {\n    left: 0;\n}\n\n.fancybox-next {\n    right: 0;\n}\n\n.fancybox-nav span {\n    position: absolute;\n    top: 50%;\n    width: 36px;\n    height: 34px;\n    margin-top: -18px;\n    cursor: pointer;\n    z-index: 8040;\n    visibility: hidden;\n}\n\n.fancybox-prev span {\n    left: 10px;\n    background-position: 0 -36px;\n}\n\n.fancybox-next span {\n    right: 10px;\n    background-position: 0 -72px;\n}\n\n.fancybox-nav:hover span {\n    visibility: visible;\n}\n\n.fancybox-tmp {\n    position: absolute;\n    top: -99999px;\n    left: -99999px;\n    visibility: hidden;\n    max-width: 99999px;\n    max-height: 99999px;\n    overflow: visible !important;\n}\n\n/* Overlay helper */\n\n.fancybox-lock {\n    overflow: hidden !important;\n    width: auto;\n}\n\n.fancybox-lock body {\n    overflow: hidden !important;\n}\n\n.fancybox-lock-test {\n    overflow-y: hidden !important;\n}\n\n.fancybox-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    display: none;\n    z-index: 8010;\n    background: url('fancybox_overlay.png');\n}\n\n.fancybox-overlay-fixed {\n    position: fixed;\n    bottom: 0;\n    right: 0;\n}\n\n.fancybox-lock .fancybox-overlay {\n    overflow: auto;\n    overflow-y: scroll;\n}\n\n/* Title helper */\n\n.fancybox-title {\n    visibility: hidden;\n    font: normal 13px/20px \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    position: relative;\n    text-shadow: none;\n    z-index: 8050;\n}\n\n.fancybox-opened .fancybox-title {\n    visibility: visible;\n}\n\n.fancybox-title-float-wrap {\n    position: absolute;\n    bottom: 0;\n    right: 50%;\n    margin-bottom: -35px;\n    z-index: 8050;\n    text-align: center;\n}\n\n.fancybox-title-float-wrap .child {\n    display: inline-block;\n    margin-right: -100%;\n    padding: 2px 20px;\n    background: transparent; /* Fallback for web browsers that doesn't support RGBa */\n    background: rgba(0, 0, 0, 0.8);\n    -webkit-border-radius: 15px;\n       -moz-border-radius: 15px;\n            border-radius: 15px;\n    text-shadow: 0 1px 2px #222;\n    color: #FFF;\n    font-weight: bold;\n    line-height: 24px;\n    white-space: nowrap;\n}\n\n.fancybox-title-outside-wrap {\n    position: relative;\n    margin-top: 10px;\n    color: #fff;\n}\n\n.fancybox-title-inside-wrap {\n    padding-top: 10px;\n}\n\n.fancybox-title-over-wrap {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    color: #fff;\n    padding: 10px;\n    background: #000;\n    background: rgba(0, 0, 0, .8);\n}\n\n/*Retina graphics!*/\n@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n       only screen and (min--moz-device-pixel-ratio: 1.5),\n       only screen and (min-device-pixel-ratio: 1.5){\n\n    #fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n        background-image: url('fancybox_sprite@2x.png');\n        background-size: 44px 152px; /*The size of the normal image, half the size of the hi-res image*/\n    }\n\n    #fancybox-loading div {\n        background-image: url('fancybox_loading@2x.gif');\n        background-size: 24px 24px; /*The size of the normal image, half the size of the hi-res image*/\n    }\n}","source":"photo/jquery.fancybox.css","raw":"/*! fancyBox v2.1.5 fancyapps.com | fancyapps.com/fancybox/#license */\n.fancybox-wrap,\n.fancybox-skin,\n.fancybox-outer,\n.fancybox-inner,\n.fancybox-image,\n.fancybox-wrap iframe,\n.fancybox-wrap object,\n.fancybox-nav,\n.fancybox-nav span,\n.fancybox-tmp\n{\n    padding: 0;\n    margin: 0;\n    border: 0;\n    outline: none;\n    vertical-align: top;\n}\n\n.fancybox-wrap {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 8020;\n}\n\n.fancybox-skin {\n    position: relative;\n    background: #f9f9f9;\n    color: #444;\n    text-shadow: none;\n    -webkit-border-radius: 4px;\n       -moz-border-radius: 4px;\n            border-radius: 4px;\n}\n\n.fancybox-opened {\n    z-index: 8030;\n}\n\n.fancybox-opened .fancybox-skin {\n    -webkit-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n       -moz-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n}\n\n.fancybox-outer, .fancybox-inner {\n    position: relative;\n}\n\n.fancybox-inner {\n    overflow: hidden;\n}\n\n.fancybox-type-iframe .fancybox-inner {\n    -webkit-overflow-scrolling: touch;\n}\n\n.fancybox-error {\n    color: #444;\n    font: 14px/20px \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    margin: 0;\n    padding: 15px;\n    white-space: nowrap;\n}\n\n.fancybox-image, .fancybox-iframe {\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n\n.fancybox-image {\n    max-width: 100%;\n    max-height: 100%;\n}\n\n#fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n    background-image: url('fancybox_sprite.png');\n}\n\n#fancybox-loading {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    margin-top: -22px;\n    margin-left: -22px;\n    background-position: 0 -108px;\n    opacity: 0.8;\n    cursor: pointer;\n    z-index: 8060;\n}\n\n#fancybox-loading div {\n    width: 44px;\n    height: 44px;\n    background: url('fancybox_loading.gif') center center no-repeat;\n}\n\n.fancybox-close {\n    position: absolute;\n    top: -18px;\n    right: -18px;\n    width: 36px;\n    height: 36px;\n    cursor: pointer;\n    z-index: 8040;\n}\n\n.fancybox-nav {\n    position: absolute;\n    top: 0;\n    width: 40%;\n    height: 100%;\n    cursor: pointer;\n    text-decoration: none;\n    background: transparent url('blank.gif'); /* helps IE */\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    z-index: 8040;\n}\n\n.fancybox-prev {\n    left: 0;\n}\n\n.fancybox-next {\n    right: 0;\n}\n\n.fancybox-nav span {\n    position: absolute;\n    top: 50%;\n    width: 36px;\n    height: 34px;\n    margin-top: -18px;\n    cursor: pointer;\n    z-index: 8040;\n    visibility: hidden;\n}\n\n.fancybox-prev span {\n    left: 10px;\n    background-position: 0 -36px;\n}\n\n.fancybox-next span {\n    right: 10px;\n    background-position: 0 -72px;\n}\n\n.fancybox-nav:hover span {\n    visibility: visible;\n}\n\n.fancybox-tmp {\n    position: absolute;\n    top: -99999px;\n    left: -99999px;\n    visibility: hidden;\n    max-width: 99999px;\n    max-height: 99999px;\n    overflow: visible !important;\n}\n\n/* Overlay helper */\n\n.fancybox-lock {\n    overflow: hidden !important;\n    width: auto;\n}\n\n.fancybox-lock body {\n    overflow: hidden !important;\n}\n\n.fancybox-lock-test {\n    overflow-y: hidden !important;\n}\n\n.fancybox-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    display: none;\n    z-index: 8010;\n    background: url('fancybox_overlay.png');\n}\n\n.fancybox-overlay-fixed {\n    position: fixed;\n    bottom: 0;\n    right: 0;\n}\n\n.fancybox-lock .fancybox-overlay {\n    overflow: auto;\n    overflow-y: scroll;\n}\n\n/* Title helper */\n\n.fancybox-title {\n    visibility: hidden;\n    font: normal 13px/20px \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    position: relative;\n    text-shadow: none;\n    z-index: 8050;\n}\n\n.fancybox-opened .fancybox-title {\n    visibility: visible;\n}\n\n.fancybox-title-float-wrap {\n    position: absolute;\n    bottom: 0;\n    right: 50%;\n    margin-bottom: -35px;\n    z-index: 8050;\n    text-align: center;\n}\n\n.fancybox-title-float-wrap .child {\n    display: inline-block;\n    margin-right: -100%;\n    padding: 2px 20px;\n    background: transparent; /* Fallback for web browsers that doesn't support RGBa */\n    background: rgba(0, 0, 0, 0.8);\n    -webkit-border-radius: 15px;\n       -moz-border-radius: 15px;\n            border-radius: 15px;\n    text-shadow: 0 1px 2px #222;\n    color: #FFF;\n    font-weight: bold;\n    line-height: 24px;\n    white-space: nowrap;\n}\n\n.fancybox-title-outside-wrap {\n    position: relative;\n    margin-top: 10px;\n    color: #fff;\n}\n\n.fancybox-title-inside-wrap {\n    padding-top: 10px;\n}\n\n.fancybox-title-over-wrap {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    color: #fff;\n    padding: 10px;\n    background: #000;\n    background: rgba(0, 0, 0, .8);\n}\n\n/*Retina graphics!*/\n@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n       only screen and (min--moz-device-pixel-ratio: 1.5),\n       only screen and (min-device-pixel-ratio: 1.5){\n\n    #fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n        background-image: url('fancybox_sprite@2x.png');\n        background-size: 44px 152px; /*The size of the normal image, half the size of the hi-res image*/\n    }\n\n    #fancybox-loading div {\n        background-image: url('fancybox_loading@2x.gif');\n        background-size: 24px 24px; /*The size of the normal image, half the size of the hi-res image*/\n    }\n}","date":"2017-07-25T09:19:43.911Z","updated":"2017-07-25T09:19:43.911Z","path":"photo/jquery.fancybox.css","layout":"false","title":"","comments":1,"_id":"cj5jf41wj0001w8hkllnrvq0b","content":"/*! fancyBox v2.1.5 fancyapps.com | fancyapps.com/fancybox/#license */\n.fancybox-wrap,\n.fancybox-skin,\n.fancybox-outer,\n.fancybox-inner,\n.fancybox-image,\n.fancybox-wrap iframe,\n.fancybox-wrap object,\n.fancybox-nav,\n.fancybox-nav span,\n.fancybox-tmp\n{\n    padding: 0;\n    margin: 0;\n    border: 0;\n    outline: none;\n    vertical-align: top;\n}\n\n.fancybox-wrap {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 8020;\n}\n\n.fancybox-skin {\n    position: relative;\n    background: #f9f9f9;\n    color: #444;\n    text-shadow: none;\n    -webkit-border-radius: 4px;\n       -moz-border-radius: 4px;\n            border-radius: 4px;\n}\n\n.fancybox-opened {\n    z-index: 8030;\n}\n\n.fancybox-opened .fancybox-skin {\n    -webkit-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n       -moz-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n}\n\n.fancybox-outer, .fancybox-inner {\n    position: relative;\n}\n\n.fancybox-inner {\n    overflow: hidden;\n}\n\n.fancybox-type-iframe .fancybox-inner {\n    -webkit-overflow-scrolling: touch;\n}\n\n.fancybox-error {\n    color: #444;\n    font: 14px/20px \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    margin: 0;\n    padding: 15px;\n    white-space: nowrap;\n}\n\n.fancybox-image, .fancybox-iframe {\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n\n.fancybox-image {\n    max-width: 100%;\n    max-height: 100%;\n}\n\n#fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n    background-image: url('fancybox_sprite.png');\n}\n\n#fancybox-loading {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    margin-top: -22px;\n    margin-left: -22px;\n    background-position: 0 -108px;\n    opacity: 0.8;\n    cursor: pointer;\n    z-index: 8060;\n}\n\n#fancybox-loading div {\n    width: 44px;\n    height: 44px;\n    background: url('fancybox_loading.gif') center center no-repeat;\n}\n\n.fancybox-close {\n    position: absolute;\n    top: -18px;\n    right: -18px;\n    width: 36px;\n    height: 36px;\n    cursor: pointer;\n    z-index: 8040;\n}\n\n.fancybox-nav {\n    position: absolute;\n    top: 0;\n    width: 40%;\n    height: 100%;\n    cursor: pointer;\n    text-decoration: none;\n    background: transparent url('blank.gif'); /* helps IE */\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    z-index: 8040;\n}\n\n.fancybox-prev {\n    left: 0;\n}\n\n.fancybox-next {\n    right: 0;\n}\n\n.fancybox-nav span {\n    position: absolute;\n    top: 50%;\n    width: 36px;\n    height: 34px;\n    margin-top: -18px;\n    cursor: pointer;\n    z-index: 8040;\n    visibility: hidden;\n}\n\n.fancybox-prev span {\n    left: 10px;\n    background-position: 0 -36px;\n}\n\n.fancybox-next span {\n    right: 10px;\n    background-position: 0 -72px;\n}\n\n.fancybox-nav:hover span {\n    visibility: visible;\n}\n\n.fancybox-tmp {\n    position: absolute;\n    top: -99999px;\n    left: -99999px;\n    visibility: hidden;\n    max-width: 99999px;\n    max-height: 99999px;\n    overflow: visible !important;\n}\n\n/* Overlay helper */\n\n.fancybox-lock {\n    overflow: hidden !important;\n    width: auto;\n}\n\n.fancybox-lock body {\n    overflow: hidden !important;\n}\n\n.fancybox-lock-test {\n    overflow-y: hidden !important;\n}\n\n.fancybox-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    display: none;\n    z-index: 8010;\n    background: url('fancybox_overlay.png');\n}\n\n.fancybox-overlay-fixed {\n    position: fixed;\n    bottom: 0;\n    right: 0;\n}\n\n.fancybox-lock .fancybox-overlay {\n    overflow: auto;\n    overflow-y: scroll;\n}\n\n/* Title helper */\n\n.fancybox-title {\n    visibility: hidden;\n    font: normal 13px/20px \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    position: relative;\n    text-shadow: none;\n    z-index: 8050;\n}\n\n.fancybox-opened .fancybox-title {\n    visibility: visible;\n}\n\n.fancybox-title-float-wrap {\n    position: absolute;\n    bottom: 0;\n    right: 50%;\n    margin-bottom: -35px;\n    z-index: 8050;\n    text-align: center;\n}\n\n.fancybox-title-float-wrap .child {\n    display: inline-block;\n    margin-right: -100%;\n    padding: 2px 20px;\n    background: transparent; /* Fallback for web browsers that doesn't support RGBa */\n    background: rgba(0, 0, 0, 0.8);\n    -webkit-border-radius: 15px;\n       -moz-border-radius: 15px;\n            border-radius: 15px;\n    text-shadow: 0 1px 2px #222;\n    color: #FFF;\n    font-weight: bold;\n    line-height: 24px;\n    white-space: nowrap;\n}\n\n.fancybox-title-outside-wrap {\n    position: relative;\n    margin-top: 10px;\n    color: #fff;\n}\n\n.fancybox-title-inside-wrap {\n    padding-top: 10px;\n}\n\n.fancybox-title-over-wrap {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    color: #fff;\n    padding: 10px;\n    background: #000;\n    background: rgba(0, 0, 0, .8);\n}\n\n/*Retina graphics!*/\n@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n       only screen and (min--moz-device-pixel-ratio: 1.5),\n       only screen and (min-device-pixel-ratio: 1.5){\n\n    #fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n        background-image: url('fancybox_sprite@2x.png');\n        background-size: 44px 152px; /*The size of the normal image, half the size of the hi-res image*/\n    }\n\n    #fancybox-loading div {\n        background-image: url('fancybox_loading@2x.gif');\n        background-size: 24px 24px; /*The size of the normal image, half the size of the hi-res image*/\n    }\n}","excerpt":"","more":"/*! fancyBox v2.1.5 fancyapps.com | fancyapps.com/fancybox/#license */\n.fancybox-wrap,\n.fancybox-skin,\n.fancybox-outer,\n.fancybox-inner,\n.fancybox-image,\n.fancybox-wrap iframe,\n.fancybox-wrap object,\n.fancybox-nav,\n.fancybox-nav span,\n.fancybox-tmp\n{\n    padding: 0;\n    margin: 0;\n    border: 0;\n    outline: none;\n    vertical-align: top;\n}\n\n.fancybox-wrap {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: 8020;\n}\n\n.fancybox-skin {\n    position: relative;\n    background: #f9f9f9;\n    color: #444;\n    text-shadow: none;\n    -webkit-border-radius: 4px;\n       -moz-border-radius: 4px;\n            border-radius: 4px;\n}\n\n.fancybox-opened {\n    z-index: 8030;\n}\n\n.fancybox-opened .fancybox-skin {\n    -webkit-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n       -moz-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\n}\n\n.fancybox-outer, .fancybox-inner {\n    position: relative;\n}\n\n.fancybox-inner {\n    overflow: hidden;\n}\n\n.fancybox-type-iframe .fancybox-inner {\n    -webkit-overflow-scrolling: touch;\n}\n\n.fancybox-error {\n    color: #444;\n    font: 14px/20px \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    margin: 0;\n    padding: 15px;\n    white-space: nowrap;\n}\n\n.fancybox-image, .fancybox-iframe {\n    display: block;\n    width: 100%;\n    height: 100%;\n}\n\n.fancybox-image {\n    max-width: 100%;\n    max-height: 100%;\n}\n\n#fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n    background-image: url('fancybox_sprite.png');\n}\n\n#fancybox-loading {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    margin-top: -22px;\n    margin-left: -22px;\n    background-position: 0 -108px;\n    opacity: 0.8;\n    cursor: pointer;\n    z-index: 8060;\n}\n\n#fancybox-loading div {\n    width: 44px;\n    height: 44px;\n    background: url('fancybox_loading.gif') center center no-repeat;\n}\n\n.fancybox-close {\n    position: absolute;\n    top: -18px;\n    right: -18px;\n    width: 36px;\n    height: 36px;\n    cursor: pointer;\n    z-index: 8040;\n}\n\n.fancybox-nav {\n    position: absolute;\n    top: 0;\n    width: 40%;\n    height: 100%;\n    cursor: pointer;\n    text-decoration: none;\n    background: transparent url('blank.gif'); /* helps IE */\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    z-index: 8040;\n}\n\n.fancybox-prev {\n    left: 0;\n}\n\n.fancybox-next {\n    right: 0;\n}\n\n.fancybox-nav span {\n    position: absolute;\n    top: 50%;\n    width: 36px;\n    height: 34px;\n    margin-top: -18px;\n    cursor: pointer;\n    z-index: 8040;\n    visibility: hidden;\n}\n\n.fancybox-prev span {\n    left: 10px;\n    background-position: 0 -36px;\n}\n\n.fancybox-next span {\n    right: 10px;\n    background-position: 0 -72px;\n}\n\n.fancybox-nav:hover span {\n    visibility: visible;\n}\n\n.fancybox-tmp {\n    position: absolute;\n    top: -99999px;\n    left: -99999px;\n    visibility: hidden;\n    max-width: 99999px;\n    max-height: 99999px;\n    overflow: visible !important;\n}\n\n/* Overlay helper */\n\n.fancybox-lock {\n    overflow: hidden !important;\n    width: auto;\n}\n\n.fancybox-lock body {\n    overflow: hidden !important;\n}\n\n.fancybox-lock-test {\n    overflow-y: hidden !important;\n}\n\n.fancybox-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    display: none;\n    z-index: 8010;\n    background: url('fancybox_overlay.png');\n}\n\n.fancybox-overlay-fixed {\n    position: fixed;\n    bottom: 0;\n    right: 0;\n}\n\n.fancybox-lock .fancybox-overlay {\n    overflow: auto;\n    overflow-y: scroll;\n}\n\n/* Title helper */\n\n.fancybox-title {\n    visibility: hidden;\n    font: normal 13px/20px \"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    position: relative;\n    text-shadow: none;\n    z-index: 8050;\n}\n\n.fancybox-opened .fancybox-title {\n    visibility: visible;\n}\n\n.fancybox-title-float-wrap {\n    position: absolute;\n    bottom: 0;\n    right: 50%;\n    margin-bottom: -35px;\n    z-index: 8050;\n    text-align: center;\n}\n\n.fancybox-title-float-wrap .child {\n    display: inline-block;\n    margin-right: -100%;\n    padding: 2px 20px;\n    background: transparent; /* Fallback for web browsers that doesn't support RGBa */\n    background: rgba(0, 0, 0, 0.8);\n    -webkit-border-radius: 15px;\n       -moz-border-radius: 15px;\n            border-radius: 15px;\n    text-shadow: 0 1px 2px #222;\n    color: #FFF;\n    font-weight: bold;\n    line-height: 24px;\n    white-space: nowrap;\n}\n\n.fancybox-title-outside-wrap {\n    position: relative;\n    margin-top: 10px;\n    color: #fff;\n}\n\n.fancybox-title-inside-wrap {\n    padding-top: 10px;\n}\n\n.fancybox-title-over-wrap {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    color: #fff;\n    padding: 10px;\n    background: #000;\n    background: rgba(0, 0, 0, .8);\n}\n\n/*Retina graphics!*/\n@media only screen and (-webkit-min-device-pixel-ratio: 1.5),\n       only screen and (min--moz-device-pixel-ratio: 1.5),\n       only screen and (min-device-pixel-ratio: 1.5){\n\n    #fancybox-loading, .fancybox-close, .fancybox-prev span, .fancybox-next span {\n        background-image: url('fancybox_sprite@2x.png');\n        background-size: 44px 152px; /*The size of the normal image, half the size of the hi-res image*/\n    }\n\n    #fancybox-loading div {\n        background-image: url('fancybox_loading@2x.gif');\n        background-size: 24px 24px; /*The size of the normal image, half the size of the hi-res image*/\n    }\n}"},{"_content":"*{padding:0;margin:0;}\n#wrap{\nposition:relative;\nmargin:0px auto;\n-webkit-column-height:150px;\n-moz-cloumn-height:150px;\n}\n#wrap li{height:auto;display:inline-block;list-style:none;}\n#wrap ul {list-style: none;}","source":"photo/photo.css","raw":"*{padding:0;margin:0;}\n#wrap{\nposition:relative;\nmargin:0px auto;\n-webkit-column-height:150px;\n-moz-cloumn-height:150px;\n}\n#wrap li{height:auto;display:inline-block;list-style:none;}\n#wrap ul {list-style: none;}","date":"2017-07-25T10:07:31.021Z","updated":"2017-07-25T10:07:31.021Z","path":"photo/photo.css","layout":"false","title":"","comments":1,"_id":"cj5jf41wn0002w8hku4sv051n","content":"*{padding:0;margin:0;}\n#wrap{\nposition:relative;\nmargin:0px auto;\n-webkit-column-height:150px;\n-moz-cloumn-height:150px;\n}\n#wrap li{height:auto;display:inline-block;list-style:none;}\n#wrap ul {list-style: none;}","excerpt":"","more":"*{padding:0;margin:0;}\n#wrap{\nposition:relative;\nmargin:0px auto;\n-webkit-column-height:150px;\n-moz-cloumn-height:150px;\n}\n#wrap li{height:auto;display:inline-block;list-style:none;}\n#wrap ul {list-style: none;}"},{"_content":"/*\n* @Author: anchen\n* @Date:   2017-07-25 16:44:54\n* @Last Modified by:   anchen\n* @Last Modified time: 2017-07-25 17:20:34\n*/\n\n'use strict';\nvar data = new Array(\n    \"IMG_0943.JPG\",\n    \"IMG_0944.JPG\",\n    \"IMG_0945.JPG\",\n    \"IMG_0946.JPG\",\n    \"IMG_0947.JPG\",\n    \"IMG_0948.JPG\",\n    \"IMG_0949.JPG\",\n    \"IMG_0950.JPG\",\n    \"IMG_0943.JPG\",\n    \"IMG_0944.JPG\",\n    \"IMG_0945.JPG\",\n    \"IMG_0946.JPG\",\n    \"IMG_0947.JPG\"\n);\nvar wrap = document.getElementById(\"wrap\");\n// position:relative;\n// margin:0px auto;\n// -webkit-column-height:150px;\n// -moz-cloumn-height:150px;\n\nfor (var i = 0; i < data.length; i++) {\n\n    var l = document.createElement(\"li\");\n    //height:180px;display:inline-block;list-style:none;\n    l.setAttribute(\"height\",\"auto\");\n    l.setAttribute(\"display\",\"inline-block\");\n    l.setAttribute(\"list-style\",\"inline-none\");\n\n\n\n    var d = document.createElement(\"div\");\n    d.setAttribute(\"height\",\"auto\");\n    d.setAttribute(\"width\",\"180px\");\n    var a = document.createElement(\"a\");\n    a.setAttribute(\"class\",\"grouped_elements\");\n    a.setAttribute(\"rel\",\"group1\");\n    var  tmp1 = \"http://7xrywe.com1.z0.glb.clouddn.com/\"+data[i];\n    a.setAttribute(\"href\",tmp1);\n    var im = document.createElement(\"img\");\n    im.setAttribute(\"class\",\"lazy\");\n    im.setAttribute(\"src\",\"/images/img-err.png\");\n    var  tmp2 = \"http://7xrywe.com1.z0.glb.clouddn.com/\"+data[i]+\"?imageView2/1/w/300/h/300/q/100\"\n    im.setAttribute(\"data-original\",tmp2);\n    a.appendChild(im);\n    d.appendChild(a);\n    l.appendChild(d);\n    wrap.appendChild(l);\n}\n\n$(\"img.lazy\").lazyload({\neffect : \"fadeIn\" ,failurelimit : 10\n});","source":"photo/photo.js","raw":"/*\n* @Author: anchen\n* @Date:   2017-07-25 16:44:54\n* @Last Modified by:   anchen\n* @Last Modified time: 2017-07-25 17:20:34\n*/\n\n'use strict';\nvar data = new Array(\n    \"IMG_0943.JPG\",\n    \"IMG_0944.JPG\",\n    \"IMG_0945.JPG\",\n    \"IMG_0946.JPG\",\n    \"IMG_0947.JPG\",\n    \"IMG_0948.JPG\",\n    \"IMG_0949.JPG\",\n    \"IMG_0950.JPG\",\n    \"IMG_0943.JPG\",\n    \"IMG_0944.JPG\",\n    \"IMG_0945.JPG\",\n    \"IMG_0946.JPG\",\n    \"IMG_0947.JPG\"\n);\nvar wrap = document.getElementById(\"wrap\");\n// position:relative;\n// margin:0px auto;\n// -webkit-column-height:150px;\n// -moz-cloumn-height:150px;\n\nfor (var i = 0; i < data.length; i++) {\n\n    var l = document.createElement(\"li\");\n    //height:180px;display:inline-block;list-style:none;\n    l.setAttribute(\"height\",\"auto\");\n    l.setAttribute(\"display\",\"inline-block\");\n    l.setAttribute(\"list-style\",\"inline-none\");\n\n\n\n    var d = document.createElement(\"div\");\n    d.setAttribute(\"height\",\"auto\");\n    d.setAttribute(\"width\",\"180px\");\n    var a = document.createElement(\"a\");\n    a.setAttribute(\"class\",\"grouped_elements\");\n    a.setAttribute(\"rel\",\"group1\");\n    var  tmp1 = \"http://7xrywe.com1.z0.glb.clouddn.com/\"+data[i];\n    a.setAttribute(\"href\",tmp1);\n    var im = document.createElement(\"img\");\n    im.setAttribute(\"class\",\"lazy\");\n    im.setAttribute(\"src\",\"/images/img-err.png\");\n    var  tmp2 = \"http://7xrywe.com1.z0.glb.clouddn.com/\"+data[i]+\"?imageView2/1/w/300/h/300/q/100\"\n    im.setAttribute(\"data-original\",tmp2);\n    a.appendChild(im);\n    d.appendChild(a);\n    l.appendChild(d);\n    wrap.appendChild(l);\n}\n\n$(\"img.lazy\").lazyload({\neffect : \"fadeIn\" ,failurelimit : 10\n});","date":"2017-07-25T09:20:34.884Z","updated":"2017-07-25T09:20:34.884Z","path":"photo/photo.js","layout":"false","title":"","comments":1,"_id":"cj5jf41wo0003w8hkdus1z4vh","content":"/*\n* @Author: anchen\n* @Date:   2017-07-25 16:44:54\n* @Last Modified by:   anchen\n* @Last Modified time: 2017-07-25 17:20:34\n*/\n\n'use strict';\nvar data = new Array(\n    \"IMG_0943.JPG\",\n    \"IMG_0944.JPG\",\n    \"IMG_0945.JPG\",\n    \"IMG_0946.JPG\",\n    \"IMG_0947.JPG\",\n    \"IMG_0948.JPG\",\n    \"IMG_0949.JPG\",\n    \"IMG_0950.JPG\",\n    \"IMG_0943.JPG\",\n    \"IMG_0944.JPG\",\n    \"IMG_0945.JPG\",\n    \"IMG_0946.JPG\",\n    \"IMG_0947.JPG\"\n);\nvar wrap = document.getElementById(\"wrap\");\n// position:relative;\n// margin:0px auto;\n// -webkit-column-height:150px;\n// -moz-cloumn-height:150px;\n\nfor (var i = 0; i < data.length; i++) {\n\n    var l = document.createElement(\"li\");\n    //height:180px;display:inline-block;list-style:none;\n    l.setAttribute(\"height\",\"auto\");\n    l.setAttribute(\"display\",\"inline-block\");\n    l.setAttribute(\"list-style\",\"inline-none\");\n\n\n\n    var d = document.createElement(\"div\");\n    d.setAttribute(\"height\",\"auto\");\n    d.setAttribute(\"width\",\"180px\");\n    var a = document.createElement(\"a\");\n    a.setAttribute(\"class\",\"grouped_elements\");\n    a.setAttribute(\"rel\",\"group1\");\n    var  tmp1 = \"http://7xrywe.com1.z0.glb.clouddn.com/\"+data[i];\n    a.setAttribute(\"href\",tmp1);\n    var im = document.createElement(\"img\");\n    im.setAttribute(\"class\",\"lazy\");\n    im.setAttribute(\"src\",\"/images/img-err.png\");\n    var  tmp2 = \"http://7xrywe.com1.z0.glb.clouddn.com/\"+data[i]+\"?imageView2/1/w/300/h/300/q/100\"\n    im.setAttribute(\"data-original\",tmp2);\n    a.appendChild(im);\n    d.appendChild(a);\n    l.appendChild(d);\n    wrap.appendChild(l);\n}\n\n$(\"img.lazy\").lazyload({\neffect : \"fadeIn\" ,failurelimit : 10\n});","excerpt":"","more":"/*\n* @Author: anchen\n* @Date:   2017-07-25 16:44:54\n* @Last Modified by:   anchen\n* @Last Modified time: 2017-07-25 17:20:34\n*/\n\n'use strict';\nvar data = new Array(\n    \"IMG_0943.JPG\",\n    \"IMG_0944.JPG\",\n    \"IMG_0945.JPG\",\n    \"IMG_0946.JPG\",\n    \"IMG_0947.JPG\",\n    \"IMG_0948.JPG\",\n    \"IMG_0949.JPG\",\n    \"IMG_0950.JPG\",\n    \"IMG_0943.JPG\",\n    \"IMG_0944.JPG\",\n    \"IMG_0945.JPG\",\n    \"IMG_0946.JPG\",\n    \"IMG_0947.JPG\"\n);\nvar wrap = document.getElementById(\"wrap\");\n// position:relative;\n// margin:0px auto;\n// -webkit-column-height:150px;\n// -moz-cloumn-height:150px;\n\nfor (var i = 0; i < data.length; i++) {\n\n    var l = document.createElement(\"li\");\n    //height:180px;display:inline-block;list-style:none;\n    l.setAttribute(\"height\",\"auto\");\n    l.setAttribute(\"display\",\"inline-block\");\n    l.setAttribute(\"list-style\",\"inline-none\");\n\n\n\n    var d = document.createElement(\"div\");\n    d.setAttribute(\"height\",\"auto\");\n    d.setAttribute(\"width\",\"180px\");\n    var a = document.createElement(\"a\");\n    a.setAttribute(\"class\",\"grouped_elements\");\n    a.setAttribute(\"rel\",\"group1\");\n    var  tmp1 = \"http://7xrywe.com1.z0.glb.clouddn.com/\"+data[i];\n    a.setAttribute(\"href\",tmp1);\n    var im = document.createElement(\"img\");\n    im.setAttribute(\"class\",\"lazy\");\n    im.setAttribute(\"src\",\"/images/img-err.png\");\n    var  tmp2 = \"http://7xrywe.com1.z0.glb.clouddn.com/\"+data[i]+\"?imageView2/1/w/300/h/300/q/100\"\n    im.setAttribute(\"data-original\",tmp2);\n    a.appendChild(im);\n    d.appendChild(a);\n    l.appendChild(d);\n    wrap.appendChild(l);\n}\n\n$(\"img.lazy\").lazyload({\neffect : \"fadeIn\" ,failurelimit : 10\n});"}],"Post":[{"ayout":"photo","title":"相册","date":"2017-07-21T04:22:00.000Z","photos":["http://otbsz8hna.bkt.clouddn.com/images/concrete.jpg"],"_content":"","source":"_posts/My-Gallery.md","raw":"ayout: photo\ntitle: 相册\ndate: 2017-07-21 12:22:00\nphotos:\n - http://otbsz8hna.bkt.clouddn.com/images/concrete.jpg\n---\n","slug":"My-Gallery","published":1,"updated":"2017-07-25T09:01:48.928Z","_id":"cj5j32wr40000rkhkv0a6sjzp","comments":1,"layout":"post","link":"","content":"","excerpt":"","more":""},{"title":"关于单例模式","date":"2016-12-13T02:13:00.000Z","_content":"单例模式无论是在实际项目开发还是面试中，都是经常会涉及到，今天总结一下什么样的单例模式才是正确的。\n### 1. 存在问题的单例模式\n#### 1.1 线程不安全的懒汉式\n```java\n/**\n * Created by zhoujunfu on 2016/8/24.\n * 线程不安全的懒汉式单例\n */\nclass SingletonLazyNonThreadSafe {\n\n    private static SingletonLazyNonThreadSafe instance;\n\n    private SingletonLazyNonThreadSafe() {\n        System.out.println(\"初始化单例对象：\" + this.hashCode());\n    }\n\n    public static SingletonLazyNonThreadSafe getInstance() {\n        if (instance == null) {\n            instance =  new SingletonLazyNonThreadSafe();\n        }\n\n        System.out.println(\"获取单例对象：\" + instance.hashCode());\n        return instance;\n    }\n\n}\n\nclass Runner implements Runnable {\n\n    @Override\n    public void run() {\n        SingletonLazyNonThreadSafe.getInstance();\n    }\n}\n\npublic class SingletonDemo {\n\n    public static void main(String[] args) throws InterruptedException {\n        // 两个线程并发访问单例类创建实例\n        Runner runnerOne = new Runner();\n        Runner runnerTwo = new Runner();\n\n        Thread threadOne = new Thread(runnerOne);\n        Thread threadTwo = new Thread(runnerTwo);\n\n        threadOne.start();\n        threadTwo.start();\n    }\n\n}\n```\n懒汉式，也是最想当然的单例方式，线程不安全，可以从以下运行结果看出，线程并发访问这种单例类时，会初始化多个实例，违反了单例类的原则，如果在两个线程start的代码中间加入线程休眠时间，这样后运行的线程才能拿到先运行线程创建的单例对象。\n<!--more-->\n\n\n#### 1.2 线程安全的懒汉式\n```java\n/**\n * Created by zhoujunfu on 2016/8/24.\n * 懒汉式单例\n */\nclass SingletonLazyThreadSafe {\n\n    private static SingletonLazyThreadSafe instance;\n\n    private SingletonLazyThreadSafe() {\n        System.out.println(\"初始化单例对象：\" + this.hashCode());\n    }\n\n    public static synchronized SingletonLazyThreadSafe getInstance() {\n        if (instance == null) {\n            instance =  new SingletonLazyThreadSafe();\n        }\n\n        System.out.println(\"获取单例对象：\" + instance.hashCode());\n        return instance;\n    }\n\n}\nclass Runner implements Runnable {\n\n    @Override\n    public void run() {\n        SingletonLazyThreadSafe.getInstance();\n    }\n}\n\npublic class TestSingleton {\n\n    public static void main(String[] args) throws InterruptedException {\n        // 两个线程并发访问单例类创建实例\n         Runner runnerOne = new Runner();\n        Runner runnerTwo = new Runner();\n\n        Thread threadOne = new Thread(runnerOne);\n        Thread threadTwo = new Thread(runnerTwo);\n\n        threadOne.start();\n        threadTwo.start();\n    }\n\n}\n```\n 通过将整个getInstance方法设为同步的，来保证每次只能有一个线程进入到创建/获取实例的方法内，虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。\n\n\n\n#### 1.3 双重检验锁\n```java\n/**\n * Created by zhoujunfu on 2016/8/24.\n * 懒汉式双重检查锁\n */\nclass SingletonDoubleCheck {\n    private SingletonDoubleCheck() {\n        System.out.println(\"初始化单例对象：\" + this.hashCode());\n    }\n\n    private static SingletonDoubleCheck instance;\n\n    public static SingletonDoubleCheck getInstance() {\n        if (instance == null) {\n            synchronized (SingletonDoubleCheck.class) {\n                if (instance == null) {\n                    instance = new SingletonDoubleCheck();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。\n这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。\n1.给 instance 分配内存\n2.调用 Singleton 的构造函数来初始化成员变量\n3.将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）\n但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。\n我们只需要将 instance 变量声明成 volatile 就可以了。\n有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。\n\n但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。\n\n### 2. 不存在问题的单例模式\n\n#### 2.1 饿汉式（非懒加载）\n```java\nclass SingletonHungry {\n    private SingletonHungry() {\n        System.out.println(\"初始化单例对象：\" + this.hashCode());\n    }\n\n    private static SingletonHungry instance = new SingletonHungry();\n\n    public SingletonHungry getInstance() {\n        return instance;\n    }\n}\n```\n这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。\n这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。\n\n#### 2.2 饿汉式（懒加载）\n```java\nclass SingletonStaticNestedClass {\n    private SingletonStaticNestedClass() {\n    }\n\n    private static class Holder {\n        private static final SingletonStaticNestedClass instance = new SingletonStaticNestedClass();\n    }\n\n    public SingletonStaticNestedClass getInstance() {\n        return Holder.instance;\n    }\n}\n```\n这种写法仍然使用JVM本身机制保证了线程安全问题；由于 Holder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本，但反序列化时会出现问题。\n\n#### 2.3 枚举式（终极方法）\n```java\nenum SingletonByEnum {\n    INSTANCE;\n}\n```\n我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写，可能是因为不太熟悉吧。\n网络上很多关于单例类的文章都介绍了用枚举法实现单例，但仅仅靠上述的例子还无法知道具体的使用方法，下面以一个具体的例子来说明如何通过枚举实现单例类。\n```java\n//Example 1\npublic enum MyDataBaseSource {\n    DATASOURCE;\n    private ComboPooledDataSource cpds = null;\n\n    private MyDataBaseSource() {\n        try {\n\n            /*--------获取properties文件内容------------*/\n            // 方法一:\n            /*\n             * InputStream is =\n             * MyDBSource.class.getClassLoader().getResourceAsStream(\"jdbc.properties\");\n             * Properties p = new Properties(); p.load(is);\n             * System.out.println(p.getProperty(\"driverClass\") );\n             */\n\n            // 方法二：(不需要properties的后缀)\n            /*\n             * ResourceBundle rb = PropertyResourceBundle.getBundle(\"jdbc\") ;\n             * System.out.println(rb.getString(\"driverClass\"));\n             */\n\n            // 方法三：(不需要properties的后缀)\n            ResourceBundle rs = ResourceBundle.getBundle(\"jdbc\");\n            cpds = new ComboPooledDataSource();\n            cpds = new ComboPooledDataSource();\n            cpds.setDriverClass(rs.getString(\"driverClass\"));\n            cpds.setJdbcUrl(rs.getString(\"jdbcUrl\"));\n            cpds.setUser(rs.getString(\"user\"));\n            cpds.setPassword(rs.getString(\"password\"));\n            cpds.setMaxPoolSize(Integer.parseInt(rs.getString(\"maxPoolSize\")));\n            cpds.setMinPoolSize(Integer.parseInt(rs.getString(\"minPoolSize\")));\n            System.out.println(\"-----调用了构造方法------\");\n            ;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Connection getConnection() {\n        try {\n            return cpds.getConnection();\n        } catch (SQLException e) {\n            return null;\n        }\n    }\n\n}\npublic class Test {\n    public static void main(String[] args) {\n        MyDataBaseSource.DATASOURCE.getConnection() ;\n        MyDataBaseSource.DATASOURCE.getConnection() ;\n        MyDataBaseSource.DATASOURCE.getConnection() ;\n    }\n}\n//Example 2\npublic enum UserActivity {\n    INSTANCE;\n\n    private DataSource _dataSource;\n    private JdbcTemplate _jdbcTemplate;\n\n    private UserActivity() {\n        this._dataSource = MysqlDb.getInstance().getDataSource();\n        this._jdbcTemplate = new JdbcTemplate(this._dataSource);\n    }\n\n    public void dostuff() {\n     ...\n    }\n}\n\n// use it as ...\nUserActivity.INSTANCE.doStuff();\n```\n\n#### Tips: 关于枚举\n先看一下枚举类型的实质：\n我们定义一个代表不同颜色的枚举类型Color，\n```java\npublic enum Color {\n    RED, BLUE, GREEN;\n}\n```\n除了以上的定义方式，我们还可以如下定义，\n```java\npublic enum Color {\n    RED(), BLUE(), GREEN();\n}\n```\n到这里你就会觉得迷茫（如果你是初学者的话），为什么这样子也可以？其实，枚举的成员就是枚举对象，只不过他们是静态常量而已。使用 javap 命令（javap 文件名<没有后缀.class>）可以反编译 class 文件，如下\n\n\n我们可以使用普通类来模拟枚举，下面定义一个 Color 类。\n```java\npublic class Color {\n    private static final Color RED = new Color();\n    private static final Color GREEN = new Color();\n    private static final Color BLUE = new Color();\n}\n```\n对比一下，你就明白了。如果按照这个逻辑，是否还可以为其添加另外的构造方法？答案是肯定的！\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n\n    Color(String desc, int value) {\n        this.desc = desc;\n        this.value = value;\n    }\n\n    String desc;\n    int value;\n}\n```\n为 Color 声明了两个成员变量，并为其构造带参数的构造器。如果你这样创建一个枚举\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n}\n```\n编译器就会报错，因为没有对应的构造函数。\n对于类来讲，最好将其成员变量私有化，然后，为成员变量提供 get、set 方法。按照这个原则，可以进一步写好 enum Color.\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n\n    Color(String desc, int value) {\n        this.desc = desc;\n        this.value = value;\n    }\n\n    private String desc;\n    private int value;\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}\n```\n但是，java 设计 enum 的目的是提供一组常量，方便用户设计。如果我们冒然的提供 set 方法（外界可以改变其成员属性），好像是有点违背了设计的初衷。那么，我们应该舍弃 set 方法，保留 get 方法。\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n\n    Color(String desc, int value) {\n        this.desc = desc;\n        this.value = value;\n    }\n\n    private String desc;\n    private int value;\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}\n```\n普通类，我们可以将其实例化，那么，能否实例化枚举呢？在回答这个问题之前，先来看看，反编译之后的 Color.class 文件\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n\n    private Color(String desc, int value) {\n        this.desc = desc;\n        this.value = value;\n    }\n\n    private String desc;\n    private int value;\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}\n```\n可以看出，编译器淘气的为其构造方法加上了 private，那么也就是说，我们无法实例化枚举。所有枚举类都继承了 Enum 类的方法，包括 toString 、equals、hashcode 等方法。因为 equals、hashcode 方法是 final 的，所以不可以被枚举重写（只可以继承）。但是，可以重写 toString 方法。\n那么，使用 Java 的不同类来模拟一下枚举，大概是这个样子\n```java\npublic class Color {\n    private static final Color RED = new Color(\"red color\", 0);\n    private static final Color GREEN = new Color(\"green color\", 1);\n    private static final Color BLUE = new Color(\"blue color\", 2);\n    private static final Color YELLOW = new Color(\"yellow color\", 3);\n\n    private final String _name;\n    private final int _id;\n\n    private Color(String name, int id) {\n        _name = name;\n        _id = id;\n    }\n\n    public String getName() {\n        return _name;\n    }\n\n    public int getId() {\n        return _id;\n    }\n\n    public static List<Color> values() {\n        List<Color> list = new ArrayList<Color>();\n        list.add(RED);\n        list.add(GREEN);\n        list.add(BLUE);\n        list.add(YELLOW);\n        return list;\n    }\n\n    @Override\n    public String toString() {\n        return \"the color _name=\" + _name + \", _id=\" + _id;\n    }\n\n}\n```\n","source":"_posts/关于单例模式.md","raw":"---\ntitle: 关于单例模式\ndate: 2016-12-13 10:13:00\ntags: [单例]\ncategories: 设计模式\n---\n单例模式无论是在实际项目开发还是面试中，都是经常会涉及到，今天总结一下什么样的单例模式才是正确的。\n### 1. 存在问题的单例模式\n#### 1.1 线程不安全的懒汉式\n```java\n/**\n * Created by zhoujunfu on 2016/8/24.\n * 线程不安全的懒汉式单例\n */\nclass SingletonLazyNonThreadSafe {\n\n    private static SingletonLazyNonThreadSafe instance;\n\n    private SingletonLazyNonThreadSafe() {\n        System.out.println(\"初始化单例对象：\" + this.hashCode());\n    }\n\n    public static SingletonLazyNonThreadSafe getInstance() {\n        if (instance == null) {\n            instance =  new SingletonLazyNonThreadSafe();\n        }\n\n        System.out.println(\"获取单例对象：\" + instance.hashCode());\n        return instance;\n    }\n\n}\n\nclass Runner implements Runnable {\n\n    @Override\n    public void run() {\n        SingletonLazyNonThreadSafe.getInstance();\n    }\n}\n\npublic class SingletonDemo {\n\n    public static void main(String[] args) throws InterruptedException {\n        // 两个线程并发访问单例类创建实例\n        Runner runnerOne = new Runner();\n        Runner runnerTwo = new Runner();\n\n        Thread threadOne = new Thread(runnerOne);\n        Thread threadTwo = new Thread(runnerTwo);\n\n        threadOne.start();\n        threadTwo.start();\n    }\n\n}\n```\n懒汉式，也是最想当然的单例方式，线程不安全，可以从以下运行结果看出，线程并发访问这种单例类时，会初始化多个实例，违反了单例类的原则，如果在两个线程start的代码中间加入线程休眠时间，这样后运行的线程才能拿到先运行线程创建的单例对象。\n<!--more-->\n\n\n#### 1.2 线程安全的懒汉式\n```java\n/**\n * Created by zhoujunfu on 2016/8/24.\n * 懒汉式单例\n */\nclass SingletonLazyThreadSafe {\n\n    private static SingletonLazyThreadSafe instance;\n\n    private SingletonLazyThreadSafe() {\n        System.out.println(\"初始化单例对象：\" + this.hashCode());\n    }\n\n    public static synchronized SingletonLazyThreadSafe getInstance() {\n        if (instance == null) {\n            instance =  new SingletonLazyThreadSafe();\n        }\n\n        System.out.println(\"获取单例对象：\" + instance.hashCode());\n        return instance;\n    }\n\n}\nclass Runner implements Runnable {\n\n    @Override\n    public void run() {\n        SingletonLazyThreadSafe.getInstance();\n    }\n}\n\npublic class TestSingleton {\n\n    public static void main(String[] args) throws InterruptedException {\n        // 两个线程并发访问单例类创建实例\n         Runner runnerOne = new Runner();\n        Runner runnerTwo = new Runner();\n\n        Thread threadOne = new Thread(runnerOne);\n        Thread threadTwo = new Thread(runnerTwo);\n\n        threadOne.start();\n        threadTwo.start();\n    }\n\n}\n```\n 通过将整个getInstance方法设为同步的，来保证每次只能有一个线程进入到创建/获取实例的方法内，虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。\n\n\n\n#### 1.3 双重检验锁\n```java\n/**\n * Created by zhoujunfu on 2016/8/24.\n * 懒汉式双重检查锁\n */\nclass SingletonDoubleCheck {\n    private SingletonDoubleCheck() {\n        System.out.println(\"初始化单例对象：\" + this.hashCode());\n    }\n\n    private static SingletonDoubleCheck instance;\n\n    public static SingletonDoubleCheck getInstance() {\n        if (instance == null) {\n            synchronized (SingletonDoubleCheck.class) {\n                if (instance == null) {\n                    instance = new SingletonDoubleCheck();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。\n这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。\n1.给 instance 分配内存\n2.调用 Singleton 的构造函数来初始化成员变量\n3.将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）\n但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。\n我们只需要将 instance 变量声明成 volatile 就可以了。\n有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。\n\n但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。\n\n### 2. 不存在问题的单例模式\n\n#### 2.1 饿汉式（非懒加载）\n```java\nclass SingletonHungry {\n    private SingletonHungry() {\n        System.out.println(\"初始化单例对象：\" + this.hashCode());\n    }\n\n    private static SingletonHungry instance = new SingletonHungry();\n\n    public SingletonHungry getInstance() {\n        return instance;\n    }\n}\n```\n这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。\n这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。\n\n#### 2.2 饿汉式（懒加载）\n```java\nclass SingletonStaticNestedClass {\n    private SingletonStaticNestedClass() {\n    }\n\n    private static class Holder {\n        private static final SingletonStaticNestedClass instance = new SingletonStaticNestedClass();\n    }\n\n    public SingletonStaticNestedClass getInstance() {\n        return Holder.instance;\n    }\n}\n```\n这种写法仍然使用JVM本身机制保证了线程安全问题；由于 Holder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本，但反序列化时会出现问题。\n\n#### 2.3 枚举式（终极方法）\n```java\nenum SingletonByEnum {\n    INSTANCE;\n}\n```\n我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写，可能是因为不太熟悉吧。\n网络上很多关于单例类的文章都介绍了用枚举法实现单例，但仅仅靠上述的例子还无法知道具体的使用方法，下面以一个具体的例子来说明如何通过枚举实现单例类。\n```java\n//Example 1\npublic enum MyDataBaseSource {\n    DATASOURCE;\n    private ComboPooledDataSource cpds = null;\n\n    private MyDataBaseSource() {\n        try {\n\n            /*--------获取properties文件内容------------*/\n            // 方法一:\n            /*\n             * InputStream is =\n             * MyDBSource.class.getClassLoader().getResourceAsStream(\"jdbc.properties\");\n             * Properties p = new Properties(); p.load(is);\n             * System.out.println(p.getProperty(\"driverClass\") );\n             */\n\n            // 方法二：(不需要properties的后缀)\n            /*\n             * ResourceBundle rb = PropertyResourceBundle.getBundle(\"jdbc\") ;\n             * System.out.println(rb.getString(\"driverClass\"));\n             */\n\n            // 方法三：(不需要properties的后缀)\n            ResourceBundle rs = ResourceBundle.getBundle(\"jdbc\");\n            cpds = new ComboPooledDataSource();\n            cpds = new ComboPooledDataSource();\n            cpds.setDriverClass(rs.getString(\"driverClass\"));\n            cpds.setJdbcUrl(rs.getString(\"jdbcUrl\"));\n            cpds.setUser(rs.getString(\"user\"));\n            cpds.setPassword(rs.getString(\"password\"));\n            cpds.setMaxPoolSize(Integer.parseInt(rs.getString(\"maxPoolSize\")));\n            cpds.setMinPoolSize(Integer.parseInt(rs.getString(\"minPoolSize\")));\n            System.out.println(\"-----调用了构造方法------\");\n            ;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Connection getConnection() {\n        try {\n            return cpds.getConnection();\n        } catch (SQLException e) {\n            return null;\n        }\n    }\n\n}\npublic class Test {\n    public static void main(String[] args) {\n        MyDataBaseSource.DATASOURCE.getConnection() ;\n        MyDataBaseSource.DATASOURCE.getConnection() ;\n        MyDataBaseSource.DATASOURCE.getConnection() ;\n    }\n}\n//Example 2\npublic enum UserActivity {\n    INSTANCE;\n\n    private DataSource _dataSource;\n    private JdbcTemplate _jdbcTemplate;\n\n    private UserActivity() {\n        this._dataSource = MysqlDb.getInstance().getDataSource();\n        this._jdbcTemplate = new JdbcTemplate(this._dataSource);\n    }\n\n    public void dostuff() {\n     ...\n    }\n}\n\n// use it as ...\nUserActivity.INSTANCE.doStuff();\n```\n\n#### Tips: 关于枚举\n先看一下枚举类型的实质：\n我们定义一个代表不同颜色的枚举类型Color，\n```java\npublic enum Color {\n    RED, BLUE, GREEN;\n}\n```\n除了以上的定义方式，我们还可以如下定义，\n```java\npublic enum Color {\n    RED(), BLUE(), GREEN();\n}\n```\n到这里你就会觉得迷茫（如果你是初学者的话），为什么这样子也可以？其实，枚举的成员就是枚举对象，只不过他们是静态常量而已。使用 javap 命令（javap 文件名<没有后缀.class>）可以反编译 class 文件，如下\n\n\n我们可以使用普通类来模拟枚举，下面定义一个 Color 类。\n```java\npublic class Color {\n    private static final Color RED = new Color();\n    private static final Color GREEN = new Color();\n    private static final Color BLUE = new Color();\n}\n```\n对比一下，你就明白了。如果按照这个逻辑，是否还可以为其添加另外的构造方法？答案是肯定的！\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n\n    Color(String desc, int value) {\n        this.desc = desc;\n        this.value = value;\n    }\n\n    String desc;\n    int value;\n}\n```\n为 Color 声明了两个成员变量，并为其构造带参数的构造器。如果你这样创建一个枚举\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n}\n```\n编译器就会报错，因为没有对应的构造函数。\n对于类来讲，最好将其成员变量私有化，然后，为成员变量提供 get、set 方法。按照这个原则，可以进一步写好 enum Color.\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n\n    Color(String desc, int value) {\n        this.desc = desc;\n        this.value = value;\n    }\n\n    private String desc;\n    private int value;\n\n    public String getDesc() {\n        return desc;\n    }\n\n    public void setDesc(String desc) {\n        this.desc = desc;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}\n```\n但是，java 设计 enum 的目的是提供一组常量，方便用户设计。如果我们冒然的提供 set 方法（外界可以改变其成员属性），好像是有点违背了设计的初衷。那么，我们应该舍弃 set 方法，保留 get 方法。\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n\n    Color(String desc, int value) {\n        this.desc = desc;\n        this.value = value;\n    }\n\n    private String desc;\n    private int value;\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}\n```\n普通类，我们可以将其实例化，那么，能否实例化枚举呢？在回答这个问题之前，先来看看，反编译之后的 Color.class 文件\n```java\npublic enum Color {\n    RED(\"red color\", 0), BLUE(\"blue color\", 1), GREEN(\"green color\", 2);\n\n    private Color(String desc, int value) {\n        this.desc = desc;\n        this.value = value;\n    }\n\n    private String desc;\n    private int value;\n\n    public int getValue() {\n        return value;\n    }\n\n    public void setValue(int value) {\n        this.value = value;\n    }\n}\n```\n可以看出，编译器淘气的为其构造方法加上了 private，那么也就是说，我们无法实例化枚举。所有枚举类都继承了 Enum 类的方法，包括 toString 、equals、hashcode 等方法。因为 equals、hashcode 方法是 final 的，所以不可以被枚举重写（只可以继承）。但是，可以重写 toString 方法。\n那么，使用 Java 的不同类来模拟一下枚举，大概是这个样子\n```java\npublic class Color {\n    private static final Color RED = new Color(\"red color\", 0);\n    private static final Color GREEN = new Color(\"green color\", 1);\n    private static final Color BLUE = new Color(\"blue color\", 2);\n    private static final Color YELLOW = new Color(\"yellow color\", 3);\n\n    private final String _name;\n    private final int _id;\n\n    private Color(String name, int id) {\n        _name = name;\n        _id = id;\n    }\n\n    public String getName() {\n        return _name;\n    }\n\n    public int getId() {\n        return _id;\n    }\n\n    public static List<Color> values() {\n        List<Color> list = new ArrayList<Color>();\n        list.add(RED);\n        list.add(GREEN);\n        list.add(BLUE);\n        list.add(YELLOW);\n        return list;\n    }\n\n    @Override\n    public String toString() {\n        return \"the color _name=\" + _name + \", _id=\" + _id;\n    }\n\n}\n```\n","slug":"关于单例模式","published":1,"updated":"2017-07-14T02:46:05.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5j32wr90001rkhkl8zmj1t4","content":"<p>单例模式无论是在实际项目开发还是面试中，都是经常会涉及到，今天总结一下什么样的单例模式才是正确的。</p>\n<h3 id=\"1-存在问题的单例模式\"><a href=\"#1-存在问题的单例模式\" class=\"headerlink\" title=\"1. 存在问题的单例模式\"></a>1. 存在问题的单例模式</h3><h4 id=\"1-1-线程不安全的懒汉式\"><a href=\"#1-1-线程不安全的懒汉式\" class=\"headerlink\" title=\"1.1 线程不安全的懒汉式\"></a>1.1 线程不安全的懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Created by zhoujunfu on 2016/8/24.</span><br><span class=\"line\"> * 线程不安全的懒汉式单例</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonLazyNonThreadSafe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonLazyNonThreadSafe instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLazyNonThreadSafe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化单例对象：\"</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonLazyNonThreadSafe <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance =  <span class=\"keyword\">new</span> SingletonLazyNonThreadSafe();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取单例对象：\"</span> + instance.hashCode());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SingletonLazyNonThreadSafe.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 两个线程并发访问单例类创建实例</span></span><br><span class=\"line\">        Runner runnerOne = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\">        Runner runnerTwo = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadOne = <span class=\"keyword\">new</span> Thread(runnerOne);</span><br><span class=\"line\">        Thread threadTwo = <span class=\"keyword\">new</span> Thread(runnerTwo);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\">        threadTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>懒汉式，也是最想当然的单例方式，线程不安全，可以从以下运行结果看出，线程并发访问这种单例类时，会初始化多个实例，违反了单例类的原则，如果在两个线程start的代码中间加入线程休眠时间，这样后运行的线程才能拿到先运行线程创建的单例对象。<br><a id=\"more\"></a></p>\n<h4 id=\"1-2-线程安全的懒汉式\"><a href=\"#1-2-线程安全的懒汉式\" class=\"headerlink\" title=\"1.2 线程安全的懒汉式\"></a>1.2 线程安全的懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Created by zhoujunfu on 2016/8/24.</span><br><span class=\"line\"> * 懒汉式单例</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonLazyThreadSafe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonLazyThreadSafe instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLazyThreadSafe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化单例对象：\"</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SingletonLazyThreadSafe <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance =  <span class=\"keyword\">new</span> SingletonLazyThreadSafe();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取单例对象：\"</span> + instance.hashCode());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SingletonLazyThreadSafe.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 两个线程并发访问单例类创建实例</span></span><br><span class=\"line\">         Runner runnerOne = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\">        Runner runnerTwo = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadOne = <span class=\"keyword\">new</span> Thread(runnerOne);</span><br><span class=\"line\">        Thread threadTwo = <span class=\"keyword\">new</span> Thread(runnerTwo);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\">        threadTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 通过将整个getInstance方法设为同步的，来保证每次只能有一个线程进入到创建/获取实例的方法内，虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。</p>\n<h4 id=\"1-3-双重检验锁\"><a href=\"#1-3-双重检验锁\" class=\"headerlink\" title=\"1.3 双重检验锁\"></a>1.3 双重检验锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Created by zhoujunfu on 2016/8/24.</span><br><span class=\"line\"> * 懒汉式双重检查锁</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDoubleCheck</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDoubleCheck</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化单例对象：\"</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDoubleCheck instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDoubleCheck <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonDoubleCheck.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> SingletonDoubleCheck();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。<br>这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。<br>1.给 instance 分配内存<br>2.调用 Singleton 的构造函数来初始化成员变量<br>3.将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）<br>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。<br>我们只需要将 instance 变量声明成 volatile 就可以了。<br>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p>\n<p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p>\n<h3 id=\"2-不存在问题的单例模式\"><a href=\"#2-不存在问题的单例模式\" class=\"headerlink\" title=\"2. 不存在问题的单例模式\"></a>2. 不存在问题的单例模式</h3><h4 id=\"2-1-饿汉式（非懒加载）\"><a href=\"#2-1-饿汉式（非懒加载）\" class=\"headerlink\" title=\"2.1 饿汉式（非懒加载）\"></a>2.1 饿汉式（非懒加载）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHungry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonHungry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化单例对象：\"</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonHungry instance = <span class=\"keyword\">new</span> SingletonHungry();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SingletonHungry <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。<br>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p>\n<h4 id=\"2-2-饿汉式（懒加载）\"><a href=\"#2-2-饿汉式（懒加载）\" class=\"headerlink\" title=\"2.2 饿汉式（懒加载）\"></a>2.2 饿汉式（懒加载）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonStaticNestedClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonStaticNestedClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonStaticNestedClass instance = <span class=\"keyword\">new</span> SingletonStaticNestedClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SingletonStaticNestedClass <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Holder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 Holder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本，但反序列化时会出现问题。</p>\n<h4 id=\"2-3-枚举式（终极方法）\"><a href=\"#2-3-枚举式（终极方法）\" class=\"headerlink\" title=\"2.3 枚举式（终极方法）\"></a>2.3 枚举式（终极方法）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> SingletonByEnum &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写，可能是因为不太熟悉吧。<br>网络上很多关于单例类的文章都介绍了用枚举法实现单例，但仅仅靠上述的例子还无法知道具体的使用方法，下面以一个具体的例子来说明如何通过枚举实现单例类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Example 1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> MyDataBaseSource &#123;</span><br><span class=\"line\">    DATASOURCE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ComboPooledDataSource cpds = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MyDataBaseSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*--------获取properties文件内容------------*/</span></span><br><span class=\"line\">            <span class=\"comment\">// 方法一:</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span><br><span class=\"line\">             * InputStream is =</span><br><span class=\"line\">             * MyDBSource.class.getClassLoader().getResourceAsStream(\"jdbc.properties\");</span><br><span class=\"line\">             * Properties p = new Properties(); p.load(is);</span><br><span class=\"line\">             * System.out.println(p.getProperty(\"driverClass\") );</span><br><span class=\"line\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 方法二：(不需要properties的后缀)</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span><br><span class=\"line\">             * ResourceBundle rb = PropertyResourceBundle.getBundle(\"jdbc\") ;</span><br><span class=\"line\">             * System.out.println(rb.getString(\"driverClass\"));</span><br><span class=\"line\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 方法三：(不需要properties的后缀)</span></span><br><span class=\"line\">            ResourceBundle rs = ResourceBundle.getBundle(<span class=\"string\">\"jdbc\"</span>);</span><br><span class=\"line\">            cpds = <span class=\"keyword\">new</span> ComboPooledDataSource();</span><br><span class=\"line\">            cpds = <span class=\"keyword\">new</span> ComboPooledDataSource();</span><br><span class=\"line\">            cpds.setDriverClass(rs.getString(<span class=\"string\">\"driverClass\"</span>));</span><br><span class=\"line\">            cpds.setJdbcUrl(rs.getString(<span class=\"string\">\"jdbcUrl\"</span>));</span><br><span class=\"line\">            cpds.setUser(rs.getString(<span class=\"string\">\"user\"</span>));</span><br><span class=\"line\">            cpds.setPassword(rs.getString(<span class=\"string\">\"password\"</span>));</span><br><span class=\"line\">            cpds.setMaxPoolSize(Integer.parseInt(rs.getString(<span class=\"string\">\"maxPoolSize\"</span>)));</span><br><span class=\"line\">            cpds.setMinPoolSize(Integer.parseInt(rs.getString(<span class=\"string\">\"minPoolSize\"</span>)));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-----调用了构造方法------\"</span>);</span><br><span class=\"line\">            ;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cpds.getConnection();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyDataBaseSource.DATASOURCE.getConnection() ;</span><br><span class=\"line\">        MyDataBaseSource.DATASOURCE.getConnection() ;</span><br><span class=\"line\">        MyDataBaseSource.DATASOURCE.getConnection() ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Example 2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> UserActivity &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSource _dataSource;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate _jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">UserActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._dataSource = MysqlDb.getInstance().getDataSource();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate(<span class=\"keyword\">this</span>._dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dostuff</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use it as ...</span></span><br><span class=\"line\">UserActivity.INSTANCE.doStuff();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Tips-关于枚举\"><a href=\"#Tips-关于枚举\" class=\"headerlink\" title=\"Tips: 关于枚举\"></a>Tips: 关于枚举</h4><p>先看一下枚举类型的实质：<br>我们定义一个代表不同颜色的枚举类型Color，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED, BLUE, GREEN;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除了以上的定义方式，我们还可以如下定义，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(), BLUE(), GREEN();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到这里你就会觉得迷茫（如果你是初学者的话），为什么这样子也可以？其实，枚举的成员就是枚举对象，只不过他们是静态常量而已。使用 javap 命令（javap 文件名&lt;没有后缀.class&gt;）可以反编译 class 文件，如下</p>\n<p>我们可以使用普通类来模拟枚举，下面定义一个 Color 类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color RED = <span class=\"keyword\">new</span> Color();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color GREEN = <span class=\"keyword\">new</span> Color();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color BLUE = <span class=\"keyword\">new</span> Color();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对比一下，你就明白了。如果按照这个逻辑，是否还可以为其添加另外的构造方法？答案是肯定的！<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Color(String desc, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String desc;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为 Color 声明了两个成员变量，并为其构造带参数的构造器。如果你这样创建一个枚举<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译器就会报错，因为没有对应的构造函数。<br>对于类来讲，最好将其成员变量私有化，然后，为成员变量提供 get、set 方法。按照这个原则，可以进一步写好 enum Color.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Color(String desc, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDesc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDesc</span><span class=\"params\">(String desc)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是，java 设计 enum 的目的是提供一组常量，方便用户设计。如果我们冒然的提供 set 方法（外界可以改变其成员属性），好像是有点违背了设计的初衷。那么，我们应该舍弃 set 方法，保留 get 方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Color(String desc, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>普通类，我们可以将其实例化，那么，能否实例化枚举呢？在回答这个问题之前，先来看看，反编译之后的 Color.class 文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Color</span><span class=\"params\">(String desc, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，编译器淘气的为其构造方法加上了 private，那么也就是说，我们无法实例化枚举。所有枚举类都继承了 Enum 类的方法，包括 toString 、equals、hashcode 等方法。因为 equals、hashcode 方法是 final 的，所以不可以被枚举重写（只可以继承）。但是，可以重写 toString 方法。<br>那么，使用 Java 的不同类来模拟一下枚举，大概是这个样子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color RED = <span class=\"keyword\">new</span> Color(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color GREEN = <span class=\"keyword\">new</span> Color(<span class=\"string\">\"green color\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color BLUE = <span class=\"keyword\">new</span> Color(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color YELLOW = <span class=\"keyword\">new</span> Color(<span class=\"string\">\"yellow color\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String _name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> _id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Color</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        _name = name;</span><br><span class=\"line\">        _id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Color&gt; <span class=\"title\">values</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Color&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Color&gt;();</span><br><span class=\"line\">        list.add(RED);</span><br><span class=\"line\">        list.add(GREEN);</span><br><span class=\"line\">        list.add(BLUE);</span><br><span class=\"line\">        list.add(YELLOW);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"the color _name=\"</span> + _name + <span class=\"string\">\", _id=\"</span> + _id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>单例模式无论是在实际项目开发还是面试中，都是经常会涉及到，今天总结一下什么样的单例模式才是正确的。</p>\n<h3 id=\"1-存在问题的单例模式\"><a href=\"#1-存在问题的单例模式\" class=\"headerlink\" title=\"1. 存在问题的单例模式\"></a>1. 存在问题的单例模式</h3><h4 id=\"1-1-线程不安全的懒汉式\"><a href=\"#1-1-线程不安全的懒汉式\" class=\"headerlink\" title=\"1.1 线程不安全的懒汉式\"></a>1.1 线程不安全的懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Created by zhoujunfu on 2016/8/24.</span><br><span class=\"line\"> * 线程不安全的懒汉式单例</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonLazyNonThreadSafe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonLazyNonThreadSafe instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLazyNonThreadSafe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化单例对象：\"</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonLazyNonThreadSafe <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance =  <span class=\"keyword\">new</span> SingletonLazyNonThreadSafe();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取单例对象：\"</span> + instance.hashCode());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SingletonLazyNonThreadSafe.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 两个线程并发访问单例类创建实例</span></span><br><span class=\"line\">        Runner runnerOne = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\">        Runner runnerTwo = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadOne = <span class=\"keyword\">new</span> Thread(runnerOne);</span><br><span class=\"line\">        Thread threadTwo = <span class=\"keyword\">new</span> Thread(runnerTwo);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\">        threadTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>懒汉式，也是最想当然的单例方式，线程不安全，可以从以下运行结果看出，线程并发访问这种单例类时，会初始化多个实例，违反了单例类的原则，如果在两个线程start的代码中间加入线程休眠时间，这样后运行的线程才能拿到先运行线程创建的单例对象。<br>","more":"</p>\n<h4 id=\"1-2-线程安全的懒汉式\"><a href=\"#1-2-线程安全的懒汉式\" class=\"headerlink\" title=\"1.2 线程安全的懒汉式\"></a>1.2 线程安全的懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Created by zhoujunfu on 2016/8/24.</span><br><span class=\"line\"> * 懒汉式单例</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonLazyThreadSafe</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonLazyThreadSafe instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonLazyThreadSafe</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化单例对象：\"</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> SingletonLazyThreadSafe <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance =  <span class=\"keyword\">new</span> SingletonLazyThreadSafe();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"获取单例对象：\"</span> + instance.hashCode());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runner</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SingletonLazyThreadSafe.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSingleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 两个线程并发访问单例类创建实例</span></span><br><span class=\"line\">         Runner runnerOne = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\">        Runner runnerTwo = <span class=\"keyword\">new</span> Runner();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread threadOne = <span class=\"keyword\">new</span> Thread(runnerOne);</span><br><span class=\"line\">        Thread threadTwo = <span class=\"keyword\">new</span> Thread(runnerTwo);</span><br><span class=\"line\"></span><br><span class=\"line\">        threadOne.start();</span><br><span class=\"line\">        threadTwo.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 通过将整个getInstance方法设为同步的，来保证每次只能有一个线程进入到创建/获取实例的方法内，虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。</p>\n<h4 id=\"1-3-双重检验锁\"><a href=\"#1-3-双重检验锁\" class=\"headerlink\" title=\"1.3 双重检验锁\"></a>1.3 双重检验锁</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Created by zhoujunfu on 2016/8/24.</span><br><span class=\"line\"> * 懒汉式双重检查锁</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonDoubleCheck</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonDoubleCheck</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化单例对象：\"</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonDoubleCheck instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingletonDoubleCheck <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (SingletonDoubleCheck.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> SingletonDoubleCheck();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。<br>这段代码看起来很完美，很可惜，它是有问题。主要在于instance = new Singleton()这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。<br>1.给 instance 分配内存<br>2.调用 Singleton 的构造函数来初始化成员变量<br>3.将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）<br>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。<br>我们只需要将 instance 变量声明成 volatile 就可以了。<br>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p>\n<p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p>\n<h3 id=\"2-不存在问题的单例模式\"><a href=\"#2-不存在问题的单例模式\" class=\"headerlink\" title=\"2. 不存在问题的单例模式\"></a>2. 不存在问题的单例模式</h3><h4 id=\"2-1-饿汉式（非懒加载）\"><a href=\"#2-1-饿汉式（非懒加载）\" class=\"headerlink\" title=\"2.1 饿汉式（非懒加载）\"></a>2.1 饿汉式（非懒加载）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHungry</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonHungry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"初始化单例对象：\"</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingletonHungry instance = <span class=\"keyword\">new</span> SingletonHungry();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SingletonHungry <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。<br>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p>\n<h4 id=\"2-2-饿汉式（懒加载）\"><a href=\"#2-2-饿汉式（懒加载）\" class=\"headerlink\" title=\"2.2 饿汉式（懒加载）\"></a>2.2 饿汉式（懒加载）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonStaticNestedClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingletonStaticNestedClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SingletonStaticNestedClass instance = <span class=\"keyword\">new</span> SingletonStaticNestedClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SingletonStaticNestedClass <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Holder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 Holder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本，但反序列化时会出现问题。</p>\n<h4 id=\"2-3-枚举式（终极方法）\"><a href=\"#2-3-枚举式（终极方法）\" class=\"headerlink\" title=\"2.3 枚举式（终极方法）\"></a>2.3 枚举式（终极方法）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> SingletonByEnum &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写，可能是因为不太熟悉吧。<br>网络上很多关于单例类的文章都介绍了用枚举法实现单例，但仅仅靠上述的例子还无法知道具体的使用方法，下面以一个具体的例子来说明如何通过枚举实现单例类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Example 1</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> MyDataBaseSource &#123;</span><br><span class=\"line\">    DATASOURCE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ComboPooledDataSource cpds = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MyDataBaseSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*--------获取properties文件内容------------*/</span></span><br><span class=\"line\">            <span class=\"comment\">// 方法一:</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span><br><span class=\"line\">             * InputStream is =</span><br><span class=\"line\">             * MyDBSource.class.getClassLoader().getResourceAsStream(\"jdbc.properties\");</span><br><span class=\"line\">             * Properties p = new Properties(); p.load(is);</span><br><span class=\"line\">             * System.out.println(p.getProperty(\"driverClass\") );</span><br><span class=\"line\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 方法二：(不需要properties的后缀)</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span><br><span class=\"line\">             * ResourceBundle rb = PropertyResourceBundle.getBundle(\"jdbc\") ;</span><br><span class=\"line\">             * System.out.println(rb.getString(\"driverClass\"));</span><br><span class=\"line\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 方法三：(不需要properties的后缀)</span></span><br><span class=\"line\">            ResourceBundle rs = ResourceBundle.getBundle(<span class=\"string\">\"jdbc\"</span>);</span><br><span class=\"line\">            cpds = <span class=\"keyword\">new</span> ComboPooledDataSource();</span><br><span class=\"line\">            cpds = <span class=\"keyword\">new</span> ComboPooledDataSource();</span><br><span class=\"line\">            cpds.setDriverClass(rs.getString(<span class=\"string\">\"driverClass\"</span>));</span><br><span class=\"line\">            cpds.setJdbcUrl(rs.getString(<span class=\"string\">\"jdbcUrl\"</span>));</span><br><span class=\"line\">            cpds.setUser(rs.getString(<span class=\"string\">\"user\"</span>));</span><br><span class=\"line\">            cpds.setPassword(rs.getString(<span class=\"string\">\"password\"</span>));</span><br><span class=\"line\">            cpds.setMaxPoolSize(Integer.parseInt(rs.getString(<span class=\"string\">\"maxPoolSize\"</span>)));</span><br><span class=\"line\">            cpds.setMinPoolSize(Integer.parseInt(rs.getString(<span class=\"string\">\"minPoolSize\"</span>)));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"-----调用了构造方法------\"</span>);</span><br><span class=\"line\">            ;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Connection <span class=\"title\">getConnection</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cpds.getConnection();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyDataBaseSource.DATASOURCE.getConnection() ;</span><br><span class=\"line\">        MyDataBaseSource.DATASOURCE.getConnection() ;</span><br><span class=\"line\">        MyDataBaseSource.DATASOURCE.getConnection() ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Example 2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> UserActivity &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DataSource _dataSource;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate _jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">UserActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._dataSource = MysqlDb.getInstance().getDataSource();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate(<span class=\"keyword\">this</span>._dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dostuff</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use it as ...</span></span><br><span class=\"line\">UserActivity.INSTANCE.doStuff();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Tips-关于枚举\"><a href=\"#Tips-关于枚举\" class=\"headerlink\" title=\"Tips: 关于枚举\"></a>Tips: 关于枚举</h4><p>先看一下枚举类型的实质：<br>我们定义一个代表不同颜色的枚举类型Color，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED, BLUE, GREEN;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>除了以上的定义方式，我们还可以如下定义，<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(), BLUE(), GREEN();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到这里你就会觉得迷茫（如果你是初学者的话），为什么这样子也可以？其实，枚举的成员就是枚举对象，只不过他们是静态常量而已。使用 javap 命令（javap 文件名&lt;没有后缀.class&gt;）可以反编译 class 文件，如下</p>\n<p>我们可以使用普通类来模拟枚举，下面定义一个 Color 类。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color RED = <span class=\"keyword\">new</span> Color();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color GREEN = <span class=\"keyword\">new</span> Color();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color BLUE = <span class=\"keyword\">new</span> Color();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对比一下，你就明白了。如果按照这个逻辑，是否还可以为其添加另外的构造方法？答案是肯定的！<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Color(String desc, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String desc;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>为 Color 声明了两个成员变量，并为其构造带参数的构造器。如果你这样创建一个枚举<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>编译器就会报错，因为没有对应的构造函数。<br>对于类来讲，最好将其成员变量私有化，然后，为成员变量提供 get、set 方法。按照这个原则，可以进一步写好 enum Color.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Color(String desc, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDesc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDesc</span><span class=\"params\">(String desc)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是，java 设计 enum 的目的是提供一组常量，方便用户设计。如果我们冒然的提供 set 方法（外界可以改变其成员属性），好像是有点违背了设计的初衷。那么，我们应该舍弃 set 方法，保留 get 方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Color(String desc, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>普通类，我们可以将其实例化，那么，能否实例化枚举呢？在回答这个问题之前，先来看看，反编译之后的 Color.class 文件<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</span><br><span class=\"line\">    RED(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>), BLUE(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">1</span>), GREEN(<span class=\"string\">\"green color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Color</span><span class=\"params\">(String desc, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，编译器淘气的为其构造方法加上了 private，那么也就是说，我们无法实例化枚举。所有枚举类都继承了 Enum 类的方法，包括 toString 、equals、hashcode 等方法。因为 equals、hashcode 方法是 final 的，所以不可以被枚举重写（只可以继承）。但是，可以重写 toString 方法。<br>那么，使用 Java 的不同类来模拟一下枚举，大概是这个样子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Color</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color RED = <span class=\"keyword\">new</span> Color(<span class=\"string\">\"red color\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color GREEN = <span class=\"keyword\">new</span> Color(<span class=\"string\">\"green color\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color BLUE = <span class=\"keyword\">new</span> Color(<span class=\"string\">\"blue color\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Color YELLOW = <span class=\"keyword\">new</span> Color(<span class=\"string\">\"yellow color\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String _name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> _id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Color</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        _name = name;</span><br><span class=\"line\">        _id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Color&gt; <span class=\"title\">values</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Color&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Color&gt;();</span><br><span class=\"line\">        list.add(RED);</span><br><span class=\"line\">        list.add(GREEN);</span><br><span class=\"line\">        list.add(BLUE);</span><br><span class=\"line\">        list.add(YELLOW);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"the color _name=\"</span> + _name + <span class=\"string\">\", _id=\"</span> + _id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"奇怪的空格","date":"2017-07-13T09:13:00.000Z","_content":"今天从一个运营给的Excel文件往数据库导入更新数据，导入完成后，发现总有一些数据没有被更新，但是文件里是有相应的数据的，一搜发现是用来做更新key的字段后有空格，例如：gh_55913f0ae122 ，然后就加了trim()函数，但是发现依然无法去掉中文空格，debug一看，这个空格是ascii码为160的空格，trim()函数是无效的，所以采用了以下的解决方法：\n```java\npublic class Main {\n    public static void main(String[] args) {\n        String test = \"gh_55913f0ae122 \";\n        System.out.println(test.length());\n        String test2 = test.replaceAll(\"\\\\u00A0\",\"\");\n        System.out.println(test2.length());\n        System.out.println(test2);\n    }\n}\n```\n输出：\n```\norigin, length = 16\ntrimResult, length = 16\nreplaceResult, length = 15\n```\n那这个ascii为160的空格是什么呢，其实就是html里的不间断空格`&nbsp;`，如果在文本中写10个普通的ascii为32的空格，在显示该页面之前，浏览器会删除它们中的9个。如需在页面中增加空格的数量，需要使用 `&nbsp;` 字符实体。\n使用`StringEscapeUtils.unescapeHtml4()`转义`&nbsp;`后和普通空格比较，可以发现返回的是false，因为两者ascii不一样，不是同样的空格。\n```java\nSystem.out.println(StringEscapeUtils.unescapeHtml4(\"&nbsp;\").equals(\" \"));\nSystem.out.println((int)StringEscapeUtils.unescapeHtml4(\"&nbsp;\").charAt(0));\nSystem.out.println((int)' ');\n```\n输出：\n```\nfalse\n160\n32\n```\n所以ascii为160的空格的unicode是00A0，使用`replaceAll(\"\\\\u00A0\",\"\")`的方式可以解决。","source":"_posts/奇怪的空格.md","raw":"---\ntitle: 奇怪的空格\ndate: 2017-07-13 17:13:00\ntags: [特殊字符]\ncategories: 技术拾遗\n---\n今天从一个运营给的Excel文件往数据库导入更新数据，导入完成后，发现总有一些数据没有被更新，但是文件里是有相应的数据的，一搜发现是用来做更新key的字段后有空格，例如：gh_55913f0ae122 ，然后就加了trim()函数，但是发现依然无法去掉中文空格，debug一看，这个空格是ascii码为160的空格，trim()函数是无效的，所以采用了以下的解决方法：\n```java\npublic class Main {\n    public static void main(String[] args) {\n        String test = \"gh_55913f0ae122 \";\n        System.out.println(test.length());\n        String test2 = test.replaceAll(\"\\\\u00A0\",\"\");\n        System.out.println(test2.length());\n        System.out.println(test2);\n    }\n}\n```\n输出：\n```\norigin, length = 16\ntrimResult, length = 16\nreplaceResult, length = 15\n```\n那这个ascii为160的空格是什么呢，其实就是html里的不间断空格`&nbsp;`，如果在文本中写10个普通的ascii为32的空格，在显示该页面之前，浏览器会删除它们中的9个。如需在页面中增加空格的数量，需要使用 `&nbsp;` 字符实体。\n使用`StringEscapeUtils.unescapeHtml4()`转义`&nbsp;`后和普通空格比较，可以发现返回的是false，因为两者ascii不一样，不是同样的空格。\n```java\nSystem.out.println(StringEscapeUtils.unescapeHtml4(\"&nbsp;\").equals(\" \"));\nSystem.out.println((int)StringEscapeUtils.unescapeHtml4(\"&nbsp;\").charAt(0));\nSystem.out.println((int)' ');\n```\n输出：\n```\nfalse\n160\n32\n```\n所以ascii为160的空格的unicode是00A0，使用`replaceAll(\"\\\\u00A0\",\"\")`的方式可以解决。","slug":"奇怪的空格","published":1,"updated":"2017-07-14T10:03:33.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5j32wrb0002rkhkwq2mcqq7","content":"<p>今天从一个运营给的Excel文件往数据库导入更新数据，导入完成后，发现总有一些数据没有被更新，但是文件里是有相应的数据的，一搜发现是用来做更新key的字段后有空格，例如：gh_55913f0ae122 ，然后就加了trim()函数，但是发现依然无法去掉中文空格，debug一看，这个空格是ascii码为160的空格，trim()函数是无效的，所以采用了以下的解决方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String test = <span class=\"string\">\"gh_55913f0ae122 \"</span>;</span><br><span class=\"line\">        System.out.println(test.length());</span><br><span class=\"line\">        String test2 = test.replaceAll(<span class=\"string\">\"\\\\u00A0\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        System.out.println(test2.length());</span><br><span class=\"line\">        System.out.println(test2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin, length = 16</span><br><span class=\"line\">trimResult, length = 16</span><br><span class=\"line\">replaceResult, length = 15</span><br></pre></td></tr></table></figure></p>\n<p>那这个ascii为160的空格是什么呢，其实就是html里的不间断空格<code>&amp;nbsp;</code>，如果在文本中写10个普通的ascii为32的空格，在显示该页面之前，浏览器会删除它们中的9个。如需在页面中增加空格的数量，需要使用 <code>&amp;nbsp;</code> 字符实体。<br>使用<code>StringEscapeUtils.unescapeHtml4()</code>转义<code>&amp;nbsp;</code>后和普通空格比较，可以发现返回的是false，因为两者ascii不一样，不是同样的空格。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(StringEscapeUtils.unescapeHtml4(<span class=\"string\">\"&amp;nbsp;\"</span>).equals(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">System.out.println((<span class=\"keyword\">int</span>)StringEscapeUtils.unescapeHtml4(<span class=\"string\">\"&amp;nbsp;\"</span>).charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println((<span class=\"keyword\">int</span>)<span class=\"string\">' '</span>);</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false</span><br><span class=\"line\">160</span><br><span class=\"line\">32</span><br></pre></td></tr></table></figure></p>\n<p>所以ascii为160的空格的unicode是00A0，使用<code>replaceAll(&quot;\\\\u00A0&quot;,&quot;&quot;)</code>的方式可以解决。</p>\n","excerpt":"","more":"<p>今天从一个运营给的Excel文件往数据库导入更新数据，导入完成后，发现总有一些数据没有被更新，但是文件里是有相应的数据的，一搜发现是用来做更新key的字段后有空格，例如：gh_55913f0ae122 ，然后就加了trim()函数，但是发现依然无法去掉中文空格，debug一看，这个空格是ascii码为160的空格，trim()函数是无效的，所以采用了以下的解决方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String test = <span class=\"string\">\"gh_55913f0ae122 \"</span>;</span><br><span class=\"line\">        System.out.println(test.length());</span><br><span class=\"line\">        String test2 = test.replaceAll(<span class=\"string\">\"\\\\u00A0\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        System.out.println(test2.length());</span><br><span class=\"line\">        System.out.println(test2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">origin, length = 16</span><br><span class=\"line\">trimResult, length = 16</span><br><span class=\"line\">replaceResult, length = 15</span><br></pre></td></tr></table></figure></p>\n<p>那这个ascii为160的空格是什么呢，其实就是html里的不间断空格<code>&amp;nbsp;</code>，如果在文本中写10个普通的ascii为32的空格，在显示该页面之前，浏览器会删除它们中的9个。如需在页面中增加空格的数量，需要使用 <code>&amp;nbsp;</code> 字符实体。<br>使用<code>StringEscapeUtils.unescapeHtml4()</code>转义<code>&amp;nbsp;</code>后和普通空格比较，可以发现返回的是false，因为两者ascii不一样，不是同样的空格。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(StringEscapeUtils.unescapeHtml4(<span class=\"string\">\"&amp;nbsp;\"</span>).equals(<span class=\"string\">\" \"</span>));</span><br><span class=\"line\">System.out.println((<span class=\"keyword\">int</span>)StringEscapeUtils.unescapeHtml4(<span class=\"string\">\"&amp;nbsp;\"</span>).charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\">System.out.println((<span class=\"keyword\">int</span>)<span class=\"string\">' '</span>);</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false</span><br><span class=\"line\">160</span><br><span class=\"line\">32</span><br></pre></td></tr></table></figure></p>\n<p>所以ascii为160的空格的unicode是00A0，使用<code>replaceAll(&quot;\\\\u00A0&quot;,&quot;&quot;)</code>的方式可以解决。</p>\n"},{"title":"可重入锁","date":"2017-02-04T13:13:00.000Z","_content":"### 1. 什么是可重入锁\n锁的概念就不用多解释了，当某个线程A已经持有了一个锁，当线程B尝试进入被这个锁保护的代码段的时候，就会被阻塞。而锁的操作粒度是”线程”，而不是调用。同一个线程再次进入同步代码的时候，可以使用自己已经获取到的锁，这就是可重入锁。\nJava里面内置锁(synchronize)和Lock(ReentrantLock)都是可重入的。\n### 2. 为什么要可重入\n如果线程A继续再次获得这个锁呢？比如一个方法是synchronized，递归调用自己，那么第一次已经获得了锁，第二次调用的时候还能进入吗？直观上当然需要能进入，这就要求必须是可重入，.可重入锁又叫做递归锁，下面是Java并发编程一书中的例子。\n```java\npublic class Widget {\n    public synchronized void doSomething() {\n        // do somethig here...\n    }\n}\n\npublic class LoggingWidget extends Widget {\n    public synchronized void doSomething() {\n        System.out.println(toString() + \": calling doSomething\");\n        super.doSomething();\n    }\n}\n```\n书中原文是这么写的，\n> “由于Widget和LoggingWidget中doSomething方法都是synchronized方法，因此每个doSomthing 方法在执行前都会获得Widget上的锁”\n\n作者或者翻译这句话描述有误或者不够严谨，synchronized在对方法使用的时候相当于使用 synchronized(this)，所以其实是用的该类实例的对象上的锁标志位，补上省略的主语和错误的地方后应该是这样：\n> “由于Widget和LoggingWidget中doSomething方法都是synchronized方法，因此线程在每个doSomthing方法在执行前都会获得LoggingWidget实例上的锁”\n\n- 当线程执行LoggingWidget实例中的doSomething时获得LoggingWidget实例的锁。\n- LoggingWidget实例doSomething方法中调用super.doSomething()，调用者依然是LoggingWidget实例，再次获得的锁依然是LoggingWidget实例的锁。\n- 线程再次获得LoggingWidget实例的锁，即锁的重入。<!--more-->\n\n### 3. 如何实现可重入锁\n为每个锁关联一个获取计数器和一个所有者线程，当计数值为0的时候，这个所就没有被任何线程只有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将获取计数值置为1，如果同一个线程再次获取这个锁，技术值将递增，退出一次同步代码块，计算值递减，当计数值为0时，这个锁就被释放.ReentrantLock里面有实现。\n\n### 4. 两种可重入锁demo\n- **syncronized**\n```java\npublic class ReentrantTest {\n    public void method1() {\n        synchronized (ReentrantTest.class) {\n            System.out.println(\"方法1获得ReentrantTest的内置锁运行了\");\n            method2();\n        }\n    }\n    public void method2() {\n        synchronized (ReentrantTest.class) {\n            System.out.println(\"方法1里面调用的方法2重入内置锁,也正常运行了\");\n        }\n    }\n    public static void main(String[] args) {\n        new ReentrantTest().method1();\n    }\n}\n```\n- **ReentrantLock**\n```java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class ReentrantLockTest {\n    private Lock lock = new ReentrantLock();\n    public void method1() {\n        lock.lock();\n        try {\n            System.out.println(\"方法1获得ReentrantLock锁运行了\");\n            method2();\n        } finally {\n            lock.unlock();\n        }\n    }\n    public void method2() {\n        lock.lock();\n        try {\n            System.out.println(\"方法1里面调用的方法2重入ReentrantLock锁,也正常运行了\");\n        } finally {\n            lock.unlock();\n        }\n    }\n    public static void main(String[] args) {\n        new ReentrantLockTest().method1();\n    }\n}\n```\n### 5. 参考文章\n\n- [可重入锁](http://blog.csdn.net/johnking123/article/details/50043961)\n- [浅谈Java中的锁](http://zhwbqd.github.io/2015/02/13/lock-in-java.html)\n- [Java中父类对象的锁和子类对象的锁有什么区别？](https://www.zhihu.com/question/28113814)","source":"_posts/可重入锁.md","raw":"---\ntitle: 可重入锁\ndate: 2017-02-04 21:13:00\ntags: [锁]\ncategories: 并发编程\n---\n### 1. 什么是可重入锁\n锁的概念就不用多解释了，当某个线程A已经持有了一个锁，当线程B尝试进入被这个锁保护的代码段的时候，就会被阻塞。而锁的操作粒度是”线程”，而不是调用。同一个线程再次进入同步代码的时候，可以使用自己已经获取到的锁，这就是可重入锁。\nJava里面内置锁(synchronize)和Lock(ReentrantLock)都是可重入的。\n### 2. 为什么要可重入\n如果线程A继续再次获得这个锁呢？比如一个方法是synchronized，递归调用自己，那么第一次已经获得了锁，第二次调用的时候还能进入吗？直观上当然需要能进入，这就要求必须是可重入，.可重入锁又叫做递归锁，下面是Java并发编程一书中的例子。\n```java\npublic class Widget {\n    public synchronized void doSomething() {\n        // do somethig here...\n    }\n}\n\npublic class LoggingWidget extends Widget {\n    public synchronized void doSomething() {\n        System.out.println(toString() + \": calling doSomething\");\n        super.doSomething();\n    }\n}\n```\n书中原文是这么写的，\n> “由于Widget和LoggingWidget中doSomething方法都是synchronized方法，因此每个doSomthing 方法在执行前都会获得Widget上的锁”\n\n作者或者翻译这句话描述有误或者不够严谨，synchronized在对方法使用的时候相当于使用 synchronized(this)，所以其实是用的该类实例的对象上的锁标志位，补上省略的主语和错误的地方后应该是这样：\n> “由于Widget和LoggingWidget中doSomething方法都是synchronized方法，因此线程在每个doSomthing方法在执行前都会获得LoggingWidget实例上的锁”\n\n- 当线程执行LoggingWidget实例中的doSomething时获得LoggingWidget实例的锁。\n- LoggingWidget实例doSomething方法中调用super.doSomething()，调用者依然是LoggingWidget实例，再次获得的锁依然是LoggingWidget实例的锁。\n- 线程再次获得LoggingWidget实例的锁，即锁的重入。<!--more-->\n\n### 3. 如何实现可重入锁\n为每个锁关联一个获取计数器和一个所有者线程，当计数值为0的时候，这个所就没有被任何线程只有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将获取计数值置为1，如果同一个线程再次获取这个锁，技术值将递增，退出一次同步代码块，计算值递减，当计数值为0时，这个锁就被释放.ReentrantLock里面有实现。\n\n### 4. 两种可重入锁demo\n- **syncronized**\n```java\npublic class ReentrantTest {\n    public void method1() {\n        synchronized (ReentrantTest.class) {\n            System.out.println(\"方法1获得ReentrantTest的内置锁运行了\");\n            method2();\n        }\n    }\n    public void method2() {\n        synchronized (ReentrantTest.class) {\n            System.out.println(\"方法1里面调用的方法2重入内置锁,也正常运行了\");\n        }\n    }\n    public static void main(String[] args) {\n        new ReentrantTest().method1();\n    }\n}\n```\n- **ReentrantLock**\n```java\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class ReentrantLockTest {\n    private Lock lock = new ReentrantLock();\n    public void method1() {\n        lock.lock();\n        try {\n            System.out.println(\"方法1获得ReentrantLock锁运行了\");\n            method2();\n        } finally {\n            lock.unlock();\n        }\n    }\n    public void method2() {\n        lock.lock();\n        try {\n            System.out.println(\"方法1里面调用的方法2重入ReentrantLock锁,也正常运行了\");\n        } finally {\n            lock.unlock();\n        }\n    }\n    public static void main(String[] args) {\n        new ReentrantLockTest().method1();\n    }\n}\n```\n### 5. 参考文章\n\n- [可重入锁](http://blog.csdn.net/johnking123/article/details/50043961)\n- [浅谈Java中的锁](http://zhwbqd.github.io/2015/02/13/lock-in-java.html)\n- [Java中父类对象的锁和子类对象的锁有什么区别？](https://www.zhihu.com/question/28113814)","slug":"可重入锁","published":1,"updated":"2017-07-14T02:46:26.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5j32wrf0005rkhk6hos4kg5","content":"<h3 id=\"1-什么是可重入锁\"><a href=\"#1-什么是可重入锁\" class=\"headerlink\" title=\"1. 什么是可重入锁\"></a>1. 什么是可重入锁</h3><p>锁的概念就不用多解释了，当某个线程A已经持有了一个锁，当线程B尝试进入被这个锁保护的代码段的时候，就会被阻塞。而锁的操作粒度是”线程”，而不是调用。同一个线程再次进入同步代码的时候，可以使用自己已经获取到的锁，这就是可重入锁。<br>Java里面内置锁(synchronize)和Lock(ReentrantLock)都是可重入的。</p>\n<h3 id=\"2-为什么要可重入\"><a href=\"#2-为什么要可重入\" class=\"headerlink\" title=\"2. 为什么要可重入\"></a>2. 为什么要可重入</h3><p>如果线程A继续再次获得这个锁呢？比如一个方法是synchronized，递归调用自己，那么第一次已经获得了锁，第二次调用的时候还能进入吗？直观上当然需要能进入，这就要求必须是可重入，.可重入锁又叫做递归锁，下面是Java并发编程一书中的例子。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do somethig here...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">Widget</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(toString() + <span class=\"string\">\": calling doSomething\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>书中原文是这么写的，</p>\n<blockquote>\n<p>“由于Widget和LoggingWidget中doSomething方法都是synchronized方法，因此每个doSomthing 方法在执行前都会获得Widget上的锁”</p>\n</blockquote>\n<p>作者或者翻译这句话描述有误或者不够严谨，synchronized在对方法使用的时候相当于使用 synchronized(this)，所以其实是用的该类实例的对象上的锁标志位，补上省略的主语和错误的地方后应该是这样：</p>\n<blockquote>\n<p>“由于Widget和LoggingWidget中doSomething方法都是synchronized方法，因此线程在每个doSomthing方法在执行前都会获得LoggingWidget实例上的锁”</p>\n</blockquote>\n<ul>\n<li>当线程执行LoggingWidget实例中的doSomething时获得LoggingWidget实例的锁。</li>\n<li>LoggingWidget实例doSomething方法中调用super.doSomething()，调用者依然是LoggingWidget实例，再次获得的锁依然是LoggingWidget实例的锁。</li>\n<li>线程再次获得LoggingWidget实例的锁，即锁的重入。<a id=\"more\"></a></li>\n</ul>\n<h3 id=\"3-如何实现可重入锁\"><a href=\"#3-如何实现可重入锁\" class=\"headerlink\" title=\"3. 如何实现可重入锁\"></a>3. 如何实现可重入锁</h3><p>为每个锁关联一个获取计数器和一个所有者线程，当计数值为0的时候，这个所就没有被任何线程只有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将获取计数值置为1，如果同一个线程再次获取这个锁，技术值将递增，退出一次同步代码块，计算值递减，当计数值为0时，这个锁就被释放.ReentrantLock里面有实现。</p>\n<h3 id=\"4-两种可重入锁demo\"><a href=\"#4-两种可重入锁demo\" class=\"headerlink\" title=\"4. 两种可重入锁demo\"></a>4. 两种可重入锁demo</h3><ul>\n<li><p><strong>syncronized</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (ReentrantTest.class) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"方法1获得ReentrantTest的内置锁运行了\"</span>);</span><br><span class=\"line\">            method2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (ReentrantTest.class) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"方法1里面调用的方法2重入内置锁,也正常运行了\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReentrantTest().method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ReentrantLock</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantLockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"方法1获得ReentrantLock锁运行了\"</span>);</span><br><span class=\"line\">            method2();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"方法1里面调用的方法2重入ReentrantLock锁,也正常运行了\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReentrantLockTest().method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-参考文章\"><a href=\"#5-参考文章\" class=\"headerlink\" title=\"5. 参考文章\"></a>5. 参考文章</h3><ul>\n<li><a href=\"http://blog.csdn.net/johnking123/article/details/50043961\" target=\"_blank\" rel=\"external\">可重入锁</a></li>\n<li><a href=\"http://zhwbqd.github.io/2015/02/13/lock-in-java.html\" target=\"_blank\" rel=\"external\">浅谈Java中的锁</a></li>\n<li><a href=\"https://www.zhihu.com/question/28113814\" target=\"_blank\" rel=\"external\">Java中父类对象的锁和子类对象的锁有什么区别？</a></li>\n</ul>\n","excerpt":"<h3 id=\"1-什么是可重入锁\"><a href=\"#1-什么是可重入锁\" class=\"headerlink\" title=\"1. 什么是可重入锁\"></a>1. 什么是可重入锁</h3><p>锁的概念就不用多解释了，当某个线程A已经持有了一个锁，当线程B尝试进入被这个锁保护的代码段的时候，就会被阻塞。而锁的操作粒度是”线程”，而不是调用。同一个线程再次进入同步代码的时候，可以使用自己已经获取到的锁，这就是可重入锁。<br>Java里面内置锁(synchronize)和Lock(ReentrantLock)都是可重入的。</p>\n<h3 id=\"2-为什么要可重入\"><a href=\"#2-为什么要可重入\" class=\"headerlink\" title=\"2. 为什么要可重入\"></a>2. 为什么要可重入</h3><p>如果线程A继续再次获得这个锁呢？比如一个方法是synchronized，递归调用自己，那么第一次已经获得了锁，第二次调用的时候还能进入吗？直观上当然需要能进入，这就要求必须是可重入，.可重入锁又叫做递归锁，下面是Java并发编程一书中的例子。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Widget</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do somethig here...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggingWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">Widget</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(toString() + <span class=\"string\">\": calling doSomething\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>书中原文是这么写的，</p>\n<blockquote>\n<p>“由于Widget和LoggingWidget中doSomething方法都是synchronized方法，因此每个doSomthing 方法在执行前都会获得Widget上的锁”</p>\n</blockquote>\n<p>作者或者翻译这句话描述有误或者不够严谨，synchronized在对方法使用的时候相当于使用 synchronized(this)，所以其实是用的该类实例的对象上的锁标志位，补上省略的主语和错误的地方后应该是这样：</p>\n<blockquote>\n<p>“由于Widget和LoggingWidget中doSomething方法都是synchronized方法，因此线程在每个doSomthing方法在执行前都会获得LoggingWidget实例上的锁”</p>\n</blockquote>\n<ul>\n<li>当线程执行LoggingWidget实例中的doSomething时获得LoggingWidget实例的锁。</li>\n<li>LoggingWidget实例doSomething方法中调用super.doSomething()，调用者依然是LoggingWidget实例，再次获得的锁依然是LoggingWidget实例的锁。</li>\n<li>线程再次获得LoggingWidget实例的锁，即锁的重入。","more":"</li>\n</ul>\n<h3 id=\"3-如何实现可重入锁\"><a href=\"#3-如何实现可重入锁\" class=\"headerlink\" title=\"3. 如何实现可重入锁\"></a>3. 如何实现可重入锁</h3><p>为每个锁关联一个获取计数器和一个所有者线程，当计数值为0的时候，这个所就没有被任何线程只有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将获取计数值置为1，如果同一个线程再次获取这个锁，技术值将递增，退出一次同步代码块，计算值递减，当计数值为0时，这个锁就被释放.ReentrantLock里面有实现。</p>\n<h3 id=\"4-两种可重入锁demo\"><a href=\"#4-两种可重入锁demo\" class=\"headerlink\" title=\"4. 两种可重入锁demo\"></a>4. 两种可重入锁demo</h3><ul>\n<li><p><strong>syncronized</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (ReentrantTest.class) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"方法1获得ReentrantTest的内置锁运行了\"</span>);</span><br><span class=\"line\">            method2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (ReentrantTest.class) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"方法1里面调用的方法2重入内置锁,也正常运行了\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReentrantTest().method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ReentrantLock</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.Lock;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReentrantLockTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"方法1获得ReentrantLock锁运行了\"</span>);</span><br><span class=\"line\">            method2();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"方法1里面调用的方法2重入ReentrantLock锁,也正常运行了\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ReentrantLockTest().method1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-参考文章\"><a href=\"#5-参考文章\" class=\"headerlink\" title=\"5. 参考文章\"></a>5. 参考文章</h3><ul>\n<li><a href=\"http://blog.csdn.net/johnking123/article/details/50043961\">可重入锁</a></li>\n<li><a href=\"http://zhwbqd.github.io/2015/02/13/lock-in-java.html\">浅谈Java中的锁</a></li>\n<li><a href=\"https://www.zhihu.com/question/28113814\">Java中父类对象的锁和子类对象的锁有什么区别？</a></li>\n</ul>"},{"title":"搬家","date":"2017-07-14T10:13:00.000Z","_content":"前不久搬家了，零零散散收拾了几大包东西，开车从南三环到北五环跑了两趟才全部搬完。这次搬家是因为换房，原来住的房子卖掉了，走完手续到了给买家腾房的时间，买的房子还要装修，所以暂时租了个房子，房子就租在了新房对面的小区，第一次租房，想起别人说的合租的种种不方便，又考虑到这段时间又要装修，又要还贷款，又要租房的压力，最后折中租了个自如的主卧带独卫的房间，这样两个人住起来还算方便，也比整租省了不少。周末收拾完，看着这个陌生的屋子，不禁回忆起这些年住过的地方，搬过的家。\n\n对于我来说，没有经历过几次真正意义上的搬家，但是常住的地方换过好几次。我出生在北京郊区的农村里，从出生到小学一年级都和父母、爷爷奶奶住在一个比较大的院子里。后来由于要在城区上学，村子离的很远，父母就买了楼房，所以我经历的第一次搬家就是从老家的院子里搬走。虽然当时很小，但是我脑子里一直清楚的记得一个画面，就是我坐在一辆130货车的后兜里，扶着一些家具，车从村子里开出来的时候看到了一起玩儿的小伙伴，我在大声喊着他的名字，当他好像并没有听到我的声音。\n\n这次搬家后，我在城区的这栋楼房里住了很久，它见证了我的小学、初中、高中。直到我高考完，上了大学，我才搬到了西直门附近的学校宿舍里。这次只能算是换了个常住的地方，不能说是搬家，我记得大学报到是我父亲开着一辆桑塔纳，带着我和我的铺盖，一路开到了宿舍的楼下，父亲帮我铺好床铺，我就住下了。这是我第一次离开家，离开父母，在这北二环边儿，一住就是四年。\n\n再次换住的地方，就是研究生入学报到了，由于换了学校读研，我要从北二环边儿搬到北三环边儿，这次是女朋友和我一起搬家，我们在宿舍楼前排着长长的队，取完钥匙，将铺盖搬到新宿舍，整理好床铺，已经快天黑了。记得搬宿舍那天是一个非常热，一切都收拾妥当了，衣服都已经被汗湿透了。\n\n再次搬家是研究生毕业后，搬到的地方，是父母在我高中时候就在市区买的一套房子，父母算很有远见，考虑到我以后要在市区工作，就趁房价还没有飞涨的时候在南三环买了套小房子，所以毕业之后，我们自然就少了其他同学租房，找地方住的烦恼，直接搬去了自己的房子。这次搬家，印象也是比较深刻，毕竟是离开了校园，不用再住炎热，吵闹的宿舍，也少了室友一起游戏，一起看剧的那份欢乐。虽然自己的房子也只是个一居开间，比宿舍大不了太多，但两个人收拾妥当后，也算是很温馨舒服的住处。\n\n接下来就到了这次搬家了，为什么又要搬家呢，一是因为上班在北边太远，二是现在的房子太小，总住着也不是长久之计，所以就打算换房，于是卖房买房，一步一步走流程，慢慢就到了搬家的日子。回首看看这些年，从郊区到二环，到三环，又到五环，从南到北也算是在北京住过的地方也算是不少了。\n\n每次搬家都会有很多不舍，看着乱糟糟的宿舍，看着空荡荡的旧屋，割舍的不仅仅是那一间屋子，几件家具，更多的是那些屋子里记录着的三尺孩童的梦想，风华正茂书生的意气，恩爱情侣的憧憬。搬家既是一次艰难的取舍过程、也是一次对过往生活回忆留念的过程，那些或束之高阁、或深埋床底柜底的物件，一件件翻出，不时会有一个个惊喜打动着自己的心灵，有的是它存在但你从未花心思找着要看的、有的是你见过却又许久没找到的、有的又是你每天见却从不在意的，无一例外地在将要搬出这个家时，勾起你无尽的对过去的思念，心中五味杂陈。\n\n然而，老房子，终究也是抵挡不住时代的变迁，搬家也是喜悦的，充满希望的。为了更好的居住环境，为了更便捷的生活，我们总会一直在路上，人生不就是这样一直远离的过程吗，相离莫相忘，且行且珍惜，就让这些记忆激励自己继续奋斗吧。\n\n","source":"_posts/搬家.md","raw":"---\ntitle: 搬家\ndate: 2017-07-14 18:13:00\ncategories: 心情随笔\n---\n前不久搬家了，零零散散收拾了几大包东西，开车从南三环到北五环跑了两趟才全部搬完。这次搬家是因为换房，原来住的房子卖掉了，走完手续到了给买家腾房的时间，买的房子还要装修，所以暂时租了个房子，房子就租在了新房对面的小区，第一次租房，想起别人说的合租的种种不方便，又考虑到这段时间又要装修，又要还贷款，又要租房的压力，最后折中租了个自如的主卧带独卫的房间，这样两个人住起来还算方便，也比整租省了不少。周末收拾完，看着这个陌生的屋子，不禁回忆起这些年住过的地方，搬过的家。\n\n对于我来说，没有经历过几次真正意义上的搬家，但是常住的地方换过好几次。我出生在北京郊区的农村里，从出生到小学一年级都和父母、爷爷奶奶住在一个比较大的院子里。后来由于要在城区上学，村子离的很远，父母就买了楼房，所以我经历的第一次搬家就是从老家的院子里搬走。虽然当时很小，但是我脑子里一直清楚的记得一个画面，就是我坐在一辆130货车的后兜里，扶着一些家具，车从村子里开出来的时候看到了一起玩儿的小伙伴，我在大声喊着他的名字，当他好像并没有听到我的声音。\n\n这次搬家后，我在城区的这栋楼房里住了很久，它见证了我的小学、初中、高中。直到我高考完，上了大学，我才搬到了西直门附近的学校宿舍里。这次只能算是换了个常住的地方，不能说是搬家，我记得大学报到是我父亲开着一辆桑塔纳，带着我和我的铺盖，一路开到了宿舍的楼下，父亲帮我铺好床铺，我就住下了。这是我第一次离开家，离开父母，在这北二环边儿，一住就是四年。\n\n再次换住的地方，就是研究生入学报到了，由于换了学校读研，我要从北二环边儿搬到北三环边儿，这次是女朋友和我一起搬家，我们在宿舍楼前排着长长的队，取完钥匙，将铺盖搬到新宿舍，整理好床铺，已经快天黑了。记得搬宿舍那天是一个非常热，一切都收拾妥当了，衣服都已经被汗湿透了。\n\n再次搬家是研究生毕业后，搬到的地方，是父母在我高中时候就在市区买的一套房子，父母算很有远见，考虑到我以后要在市区工作，就趁房价还没有飞涨的时候在南三环买了套小房子，所以毕业之后，我们自然就少了其他同学租房，找地方住的烦恼，直接搬去了自己的房子。这次搬家，印象也是比较深刻，毕竟是离开了校园，不用再住炎热，吵闹的宿舍，也少了室友一起游戏，一起看剧的那份欢乐。虽然自己的房子也只是个一居开间，比宿舍大不了太多，但两个人收拾妥当后，也算是很温馨舒服的住处。\n\n接下来就到了这次搬家了，为什么又要搬家呢，一是因为上班在北边太远，二是现在的房子太小，总住着也不是长久之计，所以就打算换房，于是卖房买房，一步一步走流程，慢慢就到了搬家的日子。回首看看这些年，从郊区到二环，到三环，又到五环，从南到北也算是在北京住过的地方也算是不少了。\n\n每次搬家都会有很多不舍，看着乱糟糟的宿舍，看着空荡荡的旧屋，割舍的不仅仅是那一间屋子，几件家具，更多的是那些屋子里记录着的三尺孩童的梦想，风华正茂书生的意气，恩爱情侣的憧憬。搬家既是一次艰难的取舍过程、也是一次对过往生活回忆留念的过程，那些或束之高阁、或深埋床底柜底的物件，一件件翻出，不时会有一个个惊喜打动着自己的心灵，有的是它存在但你从未花心思找着要看的、有的是你见过却又许久没找到的、有的又是你每天见却从不在意的，无一例外地在将要搬出这个家时，勾起你无尽的对过去的思念，心中五味杂陈。\n\n然而，老房子，终究也是抵挡不住时代的变迁，搬家也是喜悦的，充满希望的。为了更好的居住环境，为了更便捷的生活，我们总会一直在路上，人生不就是这样一直远离的过程吗，相离莫相忘，且行且珍惜，就让这些记忆激励自己继续奋斗吧。\n\n","slug":"搬家","published":1,"updated":"2017-07-18T09:26:51.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5j32wrk0006rkhkmzznv5gc","content":"<p>前不久搬家了，零零散散收拾了几大包东西，开车从南三环到北五环跑了两趟才全部搬完。这次搬家是因为换房，原来住的房子卖掉了，走完手续到了给买家腾房的时间，买的房子还要装修，所以暂时租了个房子，房子就租在了新房对面的小区，第一次租房，想起别人说的合租的种种不方便，又考虑到这段时间又要装修，又要还贷款，又要租房的压力，最后折中租了个自如的主卧带独卫的房间，这样两个人住起来还算方便，也比整租省了不少。周末收拾完，看着这个陌生的屋子，不禁回忆起这些年住过的地方，搬过的家。</p>\n<p>对于我来说，没有经历过几次真正意义上的搬家，但是常住的地方换过好几次。我出生在北京郊区的农村里，从出生到小学一年级都和父母、爷爷奶奶住在一个比较大的院子里。后来由于要在城区上学，村子离的很远，父母就买了楼房，所以我经历的第一次搬家就是从老家的院子里搬走。虽然当时很小，但是我脑子里一直清楚的记得一个画面，就是我坐在一辆130货车的后兜里，扶着一些家具，车从村子里开出来的时候看到了一起玩儿的小伙伴，我在大声喊着他的名字，当他好像并没有听到我的声音。</p>\n<p>这次搬家后，我在城区的这栋楼房里住了很久，它见证了我的小学、初中、高中。直到我高考完，上了大学，我才搬到了西直门附近的学校宿舍里。这次只能算是换了个常住的地方，不能说是搬家，我记得大学报到是我父亲开着一辆桑塔纳，带着我和我的铺盖，一路开到了宿舍的楼下，父亲帮我铺好床铺，我就住下了。这是我第一次离开家，离开父母，在这北二环边儿，一住就是四年。</p>\n<p>再次换住的地方，就是研究生入学报到了，由于换了学校读研，我要从北二环边儿搬到北三环边儿，这次是女朋友和我一起搬家，我们在宿舍楼前排着长长的队，取完钥匙，将铺盖搬到新宿舍，整理好床铺，已经快天黑了。记得搬宿舍那天是一个非常热，一切都收拾妥当了，衣服都已经被汗湿透了。</p>\n<p>再次搬家是研究生毕业后，搬到的地方，是父母在我高中时候就在市区买的一套房子，父母算很有远见，考虑到我以后要在市区工作，就趁房价还没有飞涨的时候在南三环买了套小房子，所以毕业之后，我们自然就少了其他同学租房，找地方住的烦恼，直接搬去了自己的房子。这次搬家，印象也是比较深刻，毕竟是离开了校园，不用再住炎热，吵闹的宿舍，也少了室友一起游戏，一起看剧的那份欢乐。虽然自己的房子也只是个一居开间，比宿舍大不了太多，但两个人收拾妥当后，也算是很温馨舒服的住处。</p>\n<p>接下来就到了这次搬家了，为什么又要搬家呢，一是因为上班在北边太远，二是现在的房子太小，总住着也不是长久之计，所以就打算换房，于是卖房买房，一步一步走流程，慢慢就到了搬家的日子。回首看看这些年，从郊区到二环，到三环，又到五环，从南到北也算是在北京住过的地方也算是不少了。</p>\n<p>每次搬家都会有很多不舍，看着乱糟糟的宿舍，看着空荡荡的旧屋，割舍的不仅仅是那一间屋子，几件家具，更多的是那些屋子里记录着的三尺孩童的梦想，风华正茂书生的意气，恩爱情侣的憧憬。搬家既是一次艰难的取舍过程、也是一次对过往生活回忆留念的过程，那些或束之高阁、或深埋床底柜底的物件，一件件翻出，不时会有一个个惊喜打动着自己的心灵，有的是它存在但你从未花心思找着要看的、有的是你见过却又许久没找到的、有的又是你每天见却从不在意的，无一例外地在将要搬出这个家时，勾起你无尽的对过去的思念，心中五味杂陈。</p>\n<p>然而，老房子，终究也是抵挡不住时代的变迁，搬家也是喜悦的，充满希望的。为了更好的居住环境，为了更便捷的生活，我们总会一直在路上，人生不就是这样一直远离的过程吗，相离莫相忘，且行且珍惜，就让这些记忆激励自己继续奋斗吧。</p>\n","excerpt":"","more":"<p>前不久搬家了，零零散散收拾了几大包东西，开车从南三环到北五环跑了两趟才全部搬完。这次搬家是因为换房，原来住的房子卖掉了，走完手续到了给买家腾房的时间，买的房子还要装修，所以暂时租了个房子，房子就租在了新房对面的小区，第一次租房，想起别人说的合租的种种不方便，又考虑到这段时间又要装修，又要还贷款，又要租房的压力，最后折中租了个自如的主卧带独卫的房间，这样两个人住起来还算方便，也比整租省了不少。周末收拾完，看着这个陌生的屋子，不禁回忆起这些年住过的地方，搬过的家。</p>\n<p>对于我来说，没有经历过几次真正意义上的搬家，但是常住的地方换过好几次。我出生在北京郊区的农村里，从出生到小学一年级都和父母、爷爷奶奶住在一个比较大的院子里。后来由于要在城区上学，村子离的很远，父母就买了楼房，所以我经历的第一次搬家就是从老家的院子里搬走。虽然当时很小，但是我脑子里一直清楚的记得一个画面，就是我坐在一辆130货车的后兜里，扶着一些家具，车从村子里开出来的时候看到了一起玩儿的小伙伴，我在大声喊着他的名字，当他好像并没有听到我的声音。</p>\n<p>这次搬家后，我在城区的这栋楼房里住了很久，它见证了我的小学、初中、高中。直到我高考完，上了大学，我才搬到了西直门附近的学校宿舍里。这次只能算是换了个常住的地方，不能说是搬家，我记得大学报到是我父亲开着一辆桑塔纳，带着我和我的铺盖，一路开到了宿舍的楼下，父亲帮我铺好床铺，我就住下了。这是我第一次离开家，离开父母，在这北二环边儿，一住就是四年。</p>\n<p>再次换住的地方，就是研究生入学报到了，由于换了学校读研，我要从北二环边儿搬到北三环边儿，这次是女朋友和我一起搬家，我们在宿舍楼前排着长长的队，取完钥匙，将铺盖搬到新宿舍，整理好床铺，已经快天黑了。记得搬宿舍那天是一个非常热，一切都收拾妥当了，衣服都已经被汗湿透了。</p>\n<p>再次搬家是研究生毕业后，搬到的地方，是父母在我高中时候就在市区买的一套房子，父母算很有远见，考虑到我以后要在市区工作，就趁房价还没有飞涨的时候在南三环买了套小房子，所以毕业之后，我们自然就少了其他同学租房，找地方住的烦恼，直接搬去了自己的房子。这次搬家，印象也是比较深刻，毕竟是离开了校园，不用再住炎热，吵闹的宿舍，也少了室友一起游戏，一起看剧的那份欢乐。虽然自己的房子也只是个一居开间，比宿舍大不了太多，但两个人收拾妥当后，也算是很温馨舒服的住处。</p>\n<p>接下来就到了这次搬家了，为什么又要搬家呢，一是因为上班在北边太远，二是现在的房子太小，总住着也不是长久之计，所以就打算换房，于是卖房买房，一步一步走流程，慢慢就到了搬家的日子。回首看看这些年，从郊区到二环，到三环，又到五环，从南到北也算是在北京住过的地方也算是不少了。</p>\n<p>每次搬家都会有很多不舍，看着乱糟糟的宿舍，看着空荡荡的旧屋，割舍的不仅仅是那一间屋子，几件家具，更多的是那些屋子里记录着的三尺孩童的梦想，风华正茂书生的意气，恩爱情侣的憧憬。搬家既是一次艰难的取舍过程、也是一次对过往生活回忆留念的过程，那些或束之高阁、或深埋床底柜底的物件，一件件翻出，不时会有一个个惊喜打动着自己的心灵，有的是它存在但你从未花心思找着要看的、有的是你见过却又许久没找到的、有的又是你每天见却从不在意的，无一例外地在将要搬出这个家时，勾起你无尽的对过去的思念，心中五味杂陈。</p>\n<p>然而，老房子，终究也是抵挡不住时代的变迁，搬家也是喜悦的，充满希望的。为了更好的居住环境，为了更便捷的生活，我们总会一直在路上，人生不就是这样一直远离的过程吗，相离莫相忘，且行且珍惜，就让这些记忆激励自己继续奋斗吧。</p>\n"},{"title":"数据库事务隔离级别","date":"2017-01-05T09:13:00.000Z","_content":"之前对于数据库事务概念的理解有很多不到位的地方，今天用简单的实例再来阐述一下数据库事务和隔离级别的概念，也方便以后温故而知新。\n### 1. 什么是事务\n事务（Transaction）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。例如，银行转账工作：从一个账号扣款并使另一个账号增款，这两个操作要么都执行，要么都不执行。所以，应该把它们看成一个事务。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。\n我们以Msql数据库的操作为例，再进一步解释一下数据库事务：\n首先我们用以下命令查看该Mysql会话的事务隔离级别，关于事务隔离级别及其作用，我们在后面的章节中会进行详细介绍，这里只要简单知道数据库可以设置不同的事务隔离级别，不同的隔离级别会对事务的操作产生不同的效果即可。使用以下命令可以查询当前Mysql会话的事务隔离级别，可以看到，Mysql默认的事务隔离级别是REPEATABLE-READ。<!--more-->\n\n```\nmysql> select @@tx_isolation;\n+-----------------+\n| @@tx_isolation  |\n+-----------------+\n| REPEATABLE-READ |\n+-----------------+\n```\n为了用实例来解释事务，我们创建了如下的bank数据表，并插入一条数据，\n```\nmysql> describe bank;\n+---------+---------------+------+-----+---------+----------------+\n| Field   | Type          | Null | Key | Default | Extra          |\n+---------+---------------+------+-----+---------+----------------+\n| id      | int(11)       | NO   | PRI | NULL    | auto_increment |\n| name    | varchar(40)   | NO   |     | NULL    |                |\n| balance | decimal(10,2) | YES  |     | NULL    |                |\n+---------+---------------+------+-----+---------+----------------+\nmysql> select * from bank;\n+----+------+---------+\n| id | name | balance |\n+----+------+---------+\n|  3 | fufu | 2000.00 |\n+----+------+---------+\n```\n使用start transaction命令开启数据库事务，\n```\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n```\n更新id为3的行的balance值为3000.00，\n```\nmysql> update bank set balance = 3000 where id = 3;\nQuery OK, 1 row affected (0.09 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from bank;\n+----+------+---------+\n| id | name | balance |\n+----+------+---------+\n|  3 | fufu | 3000.00 |\n+----+------+---------+\n1 row in set (0.00 sec)\n```\n此时我们可以看到，select语句查询到的id为3的行的balance值已经修改为3000.00，接下来我们再尝试插入一条新数据，\n```\nmysql> insert into bank (name, balance) values ('melo', 1000);\nQuery OK, 1 row affected (0.06 sec)\n\nmysql> select * from bank;\n+----+------+---------+\n| id | name | balance |\n+----+------+---------+\n|  3 | fufu | 3000.00 |\n|  4 | melo | 1000.00 |\n+----+------+---------+\n2 rows in set (0.00 sec)\n```\n由于以上的update和insert操作都是在start transaction命令开启事务之后，所以直到事务结束，这些操作都属于同一事务，假设我们在insert操作时产生了错误，可以根据事务的定义得知，这些属于同一事务的所有操作要么都执行要么都不执行，我们可以验证一下，使用rollback命令，模拟事务失败回滚，\n```\nmysql> rollback;\nQuery OK, 0 rows affected (0.01 sec)\n```\n此时我们在查询数据库中的所有数据，发现数据恢复到了update命令执行前的状态，id为3的行的balance值等于2000没有变化。\n```\nmysql> select * from bank;\n+----+------+---------+\n| id | name | balance |\n+----+------+---------+\n|  3 | fufu | 2000.00 |\n+----+------+---------+\n1 row in set (0.00 sec)\n```\n到此，我们阐述了数据库事务的定义并用简单的Mysql操作说明了事务的操作方式，我们可以总结出数据库事务的生命周期如下：\n```\ngraph TB\nA[数据库的初始状态]-->B[开始事务]\nB-->C[执行SQL语句]\nC-->E[提交事务]\nC-->F[撤销事务]\nE-->G[更新后的数据库状态]\nF-->A\n```\n可以看出事务的边界包括：\n* 事务的开始边界\n* 事务的正常结束边界（COMMIT），提交事务，永久保存被事务更新后的数据库状态。\n* 事务的异常结束边界（ROLLBACK）：撤销事务，使数据库退回到执行事务前的初始状态。\n\n现在我们回过头来思考一下上述示例，示例中的所有操作都是在一个Mysql会话中进行的，也就是没有其他用户在同时连接数据库进行操作，在这种没有并发会话的使用场景中，无论事务是正常结束还是异常结束，对于该单独用户读取数据不会造成任何影响，因为他的所有操作都是串行的。但是在实际应用场景中，数据库每时每刻都服务于很多会话，假设用户A的事务A开始后更新了数据库数据，此时用户B开始读取该数据，用户B将会读取到了新的值。但是如果紧接着事务A在下一条SQL语句操作时产生了错误，将事务A回滚了，那么用户B读取到的数据就是错误的无效数据了。这只是数据库事务在并发环境下会产生的一个简单的问题，所以接下来详细阐述并发事务会产生的问题。\n### 2. 并发事务会产生的问题\n这节我们主要说明并发事务时可能会出现的问题，我们用时间点和事务操作表格的方式来举例。\n#### 2.1 丢失更新\n##### 2.1.1 第一类丢失更新\n定义：A事务**撤销**时，把已经提交的B事务的更新数据覆盖了。\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |     **开始事务**            |\nT2     |                             | **开始事务**\nT3     |  查询账户余额为1000元       |\nT4     |                             | 查询账户余额为1000元\nT5     |                             | 存入100元把余额改为1100元\nT6     |                             | **提交事务**\nT7     |取出100元把余额改为900元     |\nT8     |       **撤销事务**          |\nT9     | 余额恢复为1000元（丢失更新）|\n以上的示例演示了第一类丢失更新问题，事务B虽然成功了，但是它所做的更新没有被永久存储，这种并发问题是由于完全没有隔离事务造成的。当两个事务更新相同的数据时，如果一个事务被提交，另一个事务却撤销，那么会连同第一个事务所做的更新也被撤销了。（这是绝对不允许出现的事情） 事务A的开始时间和结束时间包含事务B的开始和结束时间,事务A回滚事务的同时,把B的已经提交的事务也回滚的,这是不允许的,这就是第一类丢失更新.\n##### 2.1.2 第二类丢失更新\n定义：A事务**提交**时，把已经提交的B事务的更新数据覆盖了。\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |                             | **开始事务**\nT2     |        **开始事务**         |\nT3     |                             | 查询账户余额为1000元\nT4     |       查询账户余额为1000元  |\nT5     |                             | 取出100元把余额改为900元\nT6     |                             | **提交事务**\nT7     |   存入100元把余额改为1100   |\nT8     |       **提交事务**          |\nT9     |余额恢复为1100元（丢失更新） |\n第二类丢失更新和第一类的区别实际上就是影响是由A事务的撤销还是提交造成的，它和不可重复读(下面介绍)本质上是同一类并发问题，通常把它看做是不可重复读的一个特例。两个或多个事务查询同一数据。然后都基于自己的查询结果更新数据，这时会造成最后一个提交的更新事务，将覆盖其它已经提交的更新事务。\n#### 2.2 脏读\n定义：读到未提交更新的数据\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |                             | **开始事务**\nT2     |        **开始事务**         |\nT3     |                             | 查询账户余额为1000元\nT4     |                             | 取出500元把余额改为500元\nT5     | 查询账户余额为500元（脏读） |\nT6     |                             | **撤销事务**，余额恢复为1000元\nT7     |   存入100元把余额改为600元   |\nT8     |       **提交事务**          |\nA事务查询到了B事务未提交的更新数据，A事务依据这个查询结果继续执行相关操作。但是接着B事务撤销了所做的更新，这会导致A事务操作的是脏数据，以上的示例中T5时刻产生了脏读，最终导致A事务提交时账户余额的不正确，可能有人会有疑问，B事务还没有提交或撤销，T5时刻A事务为什么能读到已经改变的数据，这里要说的是，数据表中的数据是实时改变的，事务只是控制数据的最终状态，也就是说如果没有正确的隔离级别，在更新操作语句结束后，即使事务未完成，其他事务就已经可以读取到改变的数据值了。\n**现在为止:所有的数据库都不允许脏读操**，可以用两个Mysql会话试验一下以上的操作，在默认的隔离级别下（REPEATABLE-READ），A事务在T5时刻读取到的余额为1000元，不会是500元。\n#### 2.3 不可重复读\n定义：读到已经提交更新的数据，现象是一个事务范围内两个相同的查询却返回了不同数据。\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |                             | **开始事务**\nT2     |        **开始事务**         |\nT3     |                             | 查询账户余额为1000元\nT4     | 查询账户余额为1000元        |\nT5     |                             | 取出100元把余额改为900元\nT6     |                             | **提交事务**\nT7     |查询账户余额为900元（与T4读取的一不一致，不可重复读）  |\n\n#### 2.4 幻读\n定义：读到已提交插入数据，幻读与不可重复读类似，前者是查询到了另一个事务已提交的新插入数据，而后者是查询到了另一个事务已提交的更新数据。\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |                             | **开始事务**\nT2     |        **开始事务**         |\nT3     |  统计用户Z总存款数为1000元  |\nT4     |                             | 新增Z的一个存款账号，存款100元\nT5     |                             | **提交事务**\nT6     |                             |\nT7     |再次统计用户Z总存款数为1100元（与T4读取的一不一致，幻读）  |\n\nA事务第一次查询时，没有问题，第二次查询时查到了B事务已提交的新插入数据，这导致两次查询结果不同。\n**不可重复读和幻读的区别：**\n不可重复读，是指在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。\n一种更易理解的说法是：在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。\n\n所谓幻读，是指事务A读取与搜索条件相匹配的若干行。事务B以插入或删除行等方式来修改事务A的结果集，然后再提交。\n幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检锁范围为只读，这样就避免了幻读。\n简单来说，幻读是由插入或者删除引起的。\n\n以上就是数据库并发事务导致的五大问题，总结来说其中两类是更新问题，三类是读问题，数据库是如何避免这种并发事务问题的呢？答案就是通过不同的事务隔离级别，在不同的隔离级别下，并发事务读取数据的结果是不一样的，比如在脏读小节里介绍的，如果是在REPEATABLE-READ隔离级别下，A事务在T5时刻读取是读取不到B事务未提交的数据的。我们需要根据业务的要求，设置不同的隔离级别，在效率和数据安全性中找到平衡点。\n### 3. 事务隔离级别\nSQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。\n#### 3.1 SERIALIZABLE（串行化）\n当数据库系统使用SERIALIZABLE隔离级别时，一个事务在执行过程中完全看不到其他事务对数据库所做的更新。当两个事务同时操作数据库中相同数据时，如果第一个事务已经在访问该数据，第二个事务只能停下来等待，必须等到第一个事务结束后才能恢复运行。因此这两个事务实际上是串行化方式运行。\n#### 3.2 REPEATABLE READ（可重复读）\n当数据库系统使用REPEATABLE READ隔离级别时，一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。\n#### 3.3 READ COMMITTED（读已提交数据）\n当数据库系统使用READ COMMITTED隔离级别时，一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，而且还能看到其他事务已经提交的对已有记录的更新。\n#### 3.4 READ UNCOMMITTED（读未提交数据）\n当数据库系统使用READ UNCOMMITTED隔离级别时，一个事务在执行过程中可以看到其他事务没有提交的新插入的记录，而且还能看到其他事务没有提交的对已有记录的更新。\n\n以上的四种隔离级别按从高到底排序，你可能会说，选择SERIALIZABLE，因为它最安全！没错，它是最安全，但它也是最慢的！四种隔离级别的安全性与性能成反比！最安全的性能最差，最不安全的性能最好！\n\n### 4. 隔离级别与并发问题\n通过以上的四种隔离级别的定义，我们已经可以分析出，每个隔离级别可以避免哪些并发问题了，总结一下如下表：\n\n隔离级别 | 脏读 |不可重复读 |幻读 |第一类丢失更新 |第二类丢失更新\n---|---|---|---|---|---\nSERIALIZABLE （串行化）| 不允许| 不允许| 不允许| 不允许| 不允许\nREPEATABLE READ（可重复读）| 不允许| 不允许| 允许| 不允许| 不允许\nREAD COMMITTED （读已提交）| 不允许| 允许| 允许| 不允许| 允许\nREAD UNCOMMITTED（读未提交）| 允许| 允许| 允许| 不允许| 允许\n\n我们通过隔离级别的定义很容易自己分析出这张表，比如可重复读隔离级别的定义是一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。所以，在这种隔离级别下，在脏读示例的T5时刻和不可重复读的T7时刻，事务A都是无论事务B是否提交，事务A都是无法读取到事务B对已有记录的更新的，所以不会产生脏读和不可重复读，而又由于这种隔离级别下可以看到其他事务已经提交的新插入记录，自然是无法避免幻读的产生。另外，值得注意的是所有隔离级别都可以避免第一类丢失更新的问题。\n\n","source":"_posts/数据库事务隔离级别.md","raw":"---\ntitle: 数据库事务隔离级别\ndate: 2017-01-05 17:13:00\ntags: [数据库,事务]\ncategories: 数据库\n---\n之前对于数据库事务概念的理解有很多不到位的地方，今天用简单的实例再来阐述一下数据库事务和隔离级别的概念，也方便以后温故而知新。\n### 1. 什么是事务\n事务（Transaction）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。例如，银行转账工作：从一个账号扣款并使另一个账号增款，这两个操作要么都执行，要么都不执行。所以，应该把它们看成一个事务。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。\n我们以Msql数据库的操作为例，再进一步解释一下数据库事务：\n首先我们用以下命令查看该Mysql会话的事务隔离级别，关于事务隔离级别及其作用，我们在后面的章节中会进行详细介绍，这里只要简单知道数据库可以设置不同的事务隔离级别，不同的隔离级别会对事务的操作产生不同的效果即可。使用以下命令可以查询当前Mysql会话的事务隔离级别，可以看到，Mysql默认的事务隔离级别是REPEATABLE-READ。<!--more-->\n\n```\nmysql> select @@tx_isolation;\n+-----------------+\n| @@tx_isolation  |\n+-----------------+\n| REPEATABLE-READ |\n+-----------------+\n```\n为了用实例来解释事务，我们创建了如下的bank数据表，并插入一条数据，\n```\nmysql> describe bank;\n+---------+---------------+------+-----+---------+----------------+\n| Field   | Type          | Null | Key | Default | Extra          |\n+---------+---------------+------+-----+---------+----------------+\n| id      | int(11)       | NO   | PRI | NULL    | auto_increment |\n| name    | varchar(40)   | NO   |     | NULL    |                |\n| balance | decimal(10,2) | YES  |     | NULL    |                |\n+---------+---------------+------+-----+---------+----------------+\nmysql> select * from bank;\n+----+------+---------+\n| id | name | balance |\n+----+------+---------+\n|  3 | fufu | 2000.00 |\n+----+------+---------+\n```\n使用start transaction命令开启数据库事务，\n```\nmysql> start transaction;\nQuery OK, 0 rows affected (0.00 sec)\n```\n更新id为3的行的balance值为3000.00，\n```\nmysql> update bank set balance = 3000 where id = 3;\nQuery OK, 1 row affected (0.09 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nmysql> select * from bank;\n+----+------+---------+\n| id | name | balance |\n+----+------+---------+\n|  3 | fufu | 3000.00 |\n+----+------+---------+\n1 row in set (0.00 sec)\n```\n此时我们可以看到，select语句查询到的id为3的行的balance值已经修改为3000.00，接下来我们再尝试插入一条新数据，\n```\nmysql> insert into bank (name, balance) values ('melo', 1000);\nQuery OK, 1 row affected (0.06 sec)\n\nmysql> select * from bank;\n+----+------+---------+\n| id | name | balance |\n+----+------+---------+\n|  3 | fufu | 3000.00 |\n|  4 | melo | 1000.00 |\n+----+------+---------+\n2 rows in set (0.00 sec)\n```\n由于以上的update和insert操作都是在start transaction命令开启事务之后，所以直到事务结束，这些操作都属于同一事务，假设我们在insert操作时产生了错误，可以根据事务的定义得知，这些属于同一事务的所有操作要么都执行要么都不执行，我们可以验证一下，使用rollback命令，模拟事务失败回滚，\n```\nmysql> rollback;\nQuery OK, 0 rows affected (0.01 sec)\n```\n此时我们在查询数据库中的所有数据，发现数据恢复到了update命令执行前的状态，id为3的行的balance值等于2000没有变化。\n```\nmysql> select * from bank;\n+----+------+---------+\n| id | name | balance |\n+----+------+---------+\n|  3 | fufu | 2000.00 |\n+----+------+---------+\n1 row in set (0.00 sec)\n```\n到此，我们阐述了数据库事务的定义并用简单的Mysql操作说明了事务的操作方式，我们可以总结出数据库事务的生命周期如下：\n```\ngraph TB\nA[数据库的初始状态]-->B[开始事务]\nB-->C[执行SQL语句]\nC-->E[提交事务]\nC-->F[撤销事务]\nE-->G[更新后的数据库状态]\nF-->A\n```\n可以看出事务的边界包括：\n* 事务的开始边界\n* 事务的正常结束边界（COMMIT），提交事务，永久保存被事务更新后的数据库状态。\n* 事务的异常结束边界（ROLLBACK）：撤销事务，使数据库退回到执行事务前的初始状态。\n\n现在我们回过头来思考一下上述示例，示例中的所有操作都是在一个Mysql会话中进行的，也就是没有其他用户在同时连接数据库进行操作，在这种没有并发会话的使用场景中，无论事务是正常结束还是异常结束，对于该单独用户读取数据不会造成任何影响，因为他的所有操作都是串行的。但是在实际应用场景中，数据库每时每刻都服务于很多会话，假设用户A的事务A开始后更新了数据库数据，此时用户B开始读取该数据，用户B将会读取到了新的值。但是如果紧接着事务A在下一条SQL语句操作时产生了错误，将事务A回滚了，那么用户B读取到的数据就是错误的无效数据了。这只是数据库事务在并发环境下会产生的一个简单的问题，所以接下来详细阐述并发事务会产生的问题。\n### 2. 并发事务会产生的问题\n这节我们主要说明并发事务时可能会出现的问题，我们用时间点和事务操作表格的方式来举例。\n#### 2.1 丢失更新\n##### 2.1.1 第一类丢失更新\n定义：A事务**撤销**时，把已经提交的B事务的更新数据覆盖了。\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |     **开始事务**            |\nT2     |                             | **开始事务**\nT3     |  查询账户余额为1000元       |\nT4     |                             | 查询账户余额为1000元\nT5     |                             | 存入100元把余额改为1100元\nT6     |                             | **提交事务**\nT7     |取出100元把余额改为900元     |\nT8     |       **撤销事务**          |\nT9     | 余额恢复为1000元（丢失更新）|\n以上的示例演示了第一类丢失更新问题，事务B虽然成功了，但是它所做的更新没有被永久存储，这种并发问题是由于完全没有隔离事务造成的。当两个事务更新相同的数据时，如果一个事务被提交，另一个事务却撤销，那么会连同第一个事务所做的更新也被撤销了。（这是绝对不允许出现的事情） 事务A的开始时间和结束时间包含事务B的开始和结束时间,事务A回滚事务的同时,把B的已经提交的事务也回滚的,这是不允许的,这就是第一类丢失更新.\n##### 2.1.2 第二类丢失更新\n定义：A事务**提交**时，把已经提交的B事务的更新数据覆盖了。\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |                             | **开始事务**\nT2     |        **开始事务**         |\nT3     |                             | 查询账户余额为1000元\nT4     |       查询账户余额为1000元  |\nT5     |                             | 取出100元把余额改为900元\nT6     |                             | **提交事务**\nT7     |   存入100元把余额改为1100   |\nT8     |       **提交事务**          |\nT9     |余额恢复为1100元（丢失更新） |\n第二类丢失更新和第一类的区别实际上就是影响是由A事务的撤销还是提交造成的，它和不可重复读(下面介绍)本质上是同一类并发问题，通常把它看做是不可重复读的一个特例。两个或多个事务查询同一数据。然后都基于自己的查询结果更新数据，这时会造成最后一个提交的更新事务，将覆盖其它已经提交的更新事务。\n#### 2.2 脏读\n定义：读到未提交更新的数据\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |                             | **开始事务**\nT2     |        **开始事务**         |\nT3     |                             | 查询账户余额为1000元\nT4     |                             | 取出500元把余额改为500元\nT5     | 查询账户余额为500元（脏读） |\nT6     |                             | **撤销事务**，余额恢复为1000元\nT7     |   存入100元把余额改为600元   |\nT8     |       **提交事务**          |\nA事务查询到了B事务未提交的更新数据，A事务依据这个查询结果继续执行相关操作。但是接着B事务撤销了所做的更新，这会导致A事务操作的是脏数据，以上的示例中T5时刻产生了脏读，最终导致A事务提交时账户余额的不正确，可能有人会有疑问，B事务还没有提交或撤销，T5时刻A事务为什么能读到已经改变的数据，这里要说的是，数据表中的数据是实时改变的，事务只是控制数据的最终状态，也就是说如果没有正确的隔离级别，在更新操作语句结束后，即使事务未完成，其他事务就已经可以读取到改变的数据值了。\n**现在为止:所有的数据库都不允许脏读操**，可以用两个Mysql会话试验一下以上的操作，在默认的隔离级别下（REPEATABLE-READ），A事务在T5时刻读取到的余额为1000元，不会是500元。\n#### 2.3 不可重复读\n定义：读到已经提交更新的数据，现象是一个事务范围内两个相同的查询却返回了不同数据。\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |                             | **开始事务**\nT2     |        **开始事务**         |\nT3     |                             | 查询账户余额为1000元\nT4     | 查询账户余额为1000元        |\nT5     |                             | 取出100元把余额改为900元\nT6     |                             | **提交事务**\nT7     |查询账户余额为900元（与T4读取的一不一致，不可重复读）  |\n\n#### 2.4 幻读\n定义：读到已提交插入数据，幻读与不可重复读类似，前者是查询到了另一个事务已提交的新插入数据，而后者是查询到了另一个事务已提交的更新数据。\n\n时间点 |         事务A               | 事务B\n---    |          ---                |  ---\nT1     |                             | **开始事务**\nT2     |        **开始事务**         |\nT3     |  统计用户Z总存款数为1000元  |\nT4     |                             | 新增Z的一个存款账号，存款100元\nT5     |                             | **提交事务**\nT6     |                             |\nT7     |再次统计用户Z总存款数为1100元（与T4读取的一不一致，幻读）  |\n\nA事务第一次查询时，没有问题，第二次查询时查到了B事务已提交的新插入数据，这导致两次查询结果不同。\n**不可重复读和幻读的区别：**\n不可重复读，是指在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。\n一种更易理解的说法是：在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。\n\n所谓幻读，是指事务A读取与搜索条件相匹配的若干行。事务B以插入或删除行等方式来修改事务A的结果集，然后再提交。\n幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检锁范围为只读，这样就避免了幻读。\n简单来说，幻读是由插入或者删除引起的。\n\n以上就是数据库并发事务导致的五大问题，总结来说其中两类是更新问题，三类是读问题，数据库是如何避免这种并发事务问题的呢？答案就是通过不同的事务隔离级别，在不同的隔离级别下，并发事务读取数据的结果是不一样的，比如在脏读小节里介绍的，如果是在REPEATABLE-READ隔离级别下，A事务在T5时刻读取是读取不到B事务未提交的数据的。我们需要根据业务的要求，设置不同的隔离级别，在效率和数据安全性中找到平衡点。\n### 3. 事务隔离级别\nSQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。\n#### 3.1 SERIALIZABLE（串行化）\n当数据库系统使用SERIALIZABLE隔离级别时，一个事务在执行过程中完全看不到其他事务对数据库所做的更新。当两个事务同时操作数据库中相同数据时，如果第一个事务已经在访问该数据，第二个事务只能停下来等待，必须等到第一个事务结束后才能恢复运行。因此这两个事务实际上是串行化方式运行。\n#### 3.2 REPEATABLE READ（可重复读）\n当数据库系统使用REPEATABLE READ隔离级别时，一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。\n#### 3.3 READ COMMITTED（读已提交数据）\n当数据库系统使用READ COMMITTED隔离级别时，一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，而且还能看到其他事务已经提交的对已有记录的更新。\n#### 3.4 READ UNCOMMITTED（读未提交数据）\n当数据库系统使用READ UNCOMMITTED隔离级别时，一个事务在执行过程中可以看到其他事务没有提交的新插入的记录，而且还能看到其他事务没有提交的对已有记录的更新。\n\n以上的四种隔离级别按从高到底排序，你可能会说，选择SERIALIZABLE，因为它最安全！没错，它是最安全，但它也是最慢的！四种隔离级别的安全性与性能成反比！最安全的性能最差，最不安全的性能最好！\n\n### 4. 隔离级别与并发问题\n通过以上的四种隔离级别的定义，我们已经可以分析出，每个隔离级别可以避免哪些并发问题了，总结一下如下表：\n\n隔离级别 | 脏读 |不可重复读 |幻读 |第一类丢失更新 |第二类丢失更新\n---|---|---|---|---|---\nSERIALIZABLE （串行化）| 不允许| 不允许| 不允许| 不允许| 不允许\nREPEATABLE READ（可重复读）| 不允许| 不允许| 允许| 不允许| 不允许\nREAD COMMITTED （读已提交）| 不允许| 允许| 允许| 不允许| 允许\nREAD UNCOMMITTED（读未提交）| 允许| 允许| 允许| 不允许| 允许\n\n我们通过隔离级别的定义很容易自己分析出这张表，比如可重复读隔离级别的定义是一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。所以，在这种隔离级别下，在脏读示例的T5时刻和不可重复读的T7时刻，事务A都是无论事务B是否提交，事务A都是无法读取到事务B对已有记录的更新的，所以不会产生脏读和不可重复读，而又由于这种隔离级别下可以看到其他事务已经提交的新插入记录，自然是无法避免幻读的产生。另外，值得注意的是所有隔离级别都可以避免第一类丢失更新的问题。\n\n","slug":"数据库事务隔离级别","published":1,"updated":"2017-07-14T02:46:54.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5j32wwa000jrkhksyxqfv6k","content":"<p>之前对于数据库事务概念的理解有很多不到位的地方，今天用简单的实例再来阐述一下数据库事务和隔离级别的概念，也方便以后温故而知新。</p>\n<h3 id=\"1-什么是事务\"><a href=\"#1-什么是事务\" class=\"headerlink\" title=\"1. 什么是事务\"></a>1. 什么是事务</h3><p>事务（Transaction）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。例如，银行转账工作：从一个账号扣款并使另一个账号增款，这两个操作要么都执行，要么都不执行。所以，应该把它们看成一个事务。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。<br>我们以Msql数据库的操作为例，再进一步解释一下数据库事务：<br>首先我们用以下命令查看该Mysql会话的事务隔离级别，关于事务隔离级别及其作用，我们在后面的章节中会进行详细介绍，这里只要简单知道数据库可以设置不同的事务隔离级别，不同的隔离级别会对事务的操作产生不同的效果即可。使用以下命令可以查询当前Mysql会话的事务隔离级别，可以看到，Mysql默认的事务隔离级别是REPEATABLE-READ。<a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@tx_isolation;</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| @@tx_isolation  |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| REPEATABLE-READ |</span><br><span class=\"line\">+-----------------+</span><br></pre></td></tr></table></figure>\n<p>为了用实例来解释事务，我们创建了如下的bank数据表，并插入一条数据，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; describe bank;</span><br><span class=\"line\">+---------+---------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type          | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+---------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id      | int(11)       | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name    | varchar(40)   | NO   |     | NULL    |                |</span><br><span class=\"line\">| balance | decimal(10,2) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+---------------+------+-----+---------+----------------+</span><br><span class=\"line\">mysql&gt; select * from bank;</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">| id | name | balance |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">|  3 | fufu | 2000.00 |</span><br><span class=\"line\">+----+------+---------+</span><br></pre></td></tr></table></figure></p>\n<p>使用start transaction命令开启数据库事务，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; start transaction;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>更新id为3的行的balance值为3000.00，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update bank set balance = 3000 where id = 3;</span><br><span class=\"line\">Query OK, 1 row affected (0.09 sec)</span><br><span class=\"line\">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from bank;</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">| id | name | balance |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">|  3 | fufu | 3000.00 |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>此时我们可以看到，select语句查询到的id为3的行的balance值已经修改为3000.00，接下来我们再尝试插入一条新数据，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; insert into bank (name, balance) values (&apos;melo&apos;, 1000);</span><br><span class=\"line\">Query OK, 1 row affected (0.06 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from bank;</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">| id | name | balance |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">|  3 | fufu | 3000.00 |</span><br><span class=\"line\">|  4 | melo | 1000.00 |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>由于以上的update和insert操作都是在start transaction命令开启事务之后，所以直到事务结束，这些操作都属于同一事务，假设我们在insert操作时产生了错误，可以根据事务的定义得知，这些属于同一事务的所有操作要么都执行要么都不执行，我们可以验证一下，使用rollback命令，模拟事务失败回滚，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; rollback;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></p>\n<p>此时我们在查询数据库中的所有数据，发现数据恢复到了update命令执行前的状态，id为3的行的balance值等于2000没有变化。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from bank;</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">| id | name | balance |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">|  3 | fufu | 2000.00 |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>到此，我们阐述了数据库事务的定义并用简单的Mysql操作说明了事务的操作方式，我们可以总结出数据库事务的生命周期如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">A[数据库的初始状态]--&gt;B[开始事务]</span><br><span class=\"line\">B--&gt;C[执行SQL语句]</span><br><span class=\"line\">C--&gt;E[提交事务]</span><br><span class=\"line\">C--&gt;F[撤销事务]</span><br><span class=\"line\">E--&gt;G[更新后的数据库状态]</span><br><span class=\"line\">F--&gt;A</span><br></pre></td></tr></table></figure></p>\n<p>可以看出事务的边界包括：</p>\n<ul>\n<li>事务的开始边界</li>\n<li>事务的正常结束边界（COMMIT），提交事务，永久保存被事务更新后的数据库状态。</li>\n<li>事务的异常结束边界（ROLLBACK）：撤销事务，使数据库退回到执行事务前的初始状态。</li>\n</ul>\n<p>现在我们回过头来思考一下上述示例，示例中的所有操作都是在一个Mysql会话中进行的，也就是没有其他用户在同时连接数据库进行操作，在这种没有并发会话的使用场景中，无论事务是正常结束还是异常结束，对于该单独用户读取数据不会造成任何影响，因为他的所有操作都是串行的。但是在实际应用场景中，数据库每时每刻都服务于很多会话，假设用户A的事务A开始后更新了数据库数据，此时用户B开始读取该数据，用户B将会读取到了新的值。但是如果紧接着事务A在下一条SQL语句操作时产生了错误，将事务A回滚了，那么用户B读取到的数据就是错误的无效数据了。这只是数据库事务在并发环境下会产生的一个简单的问题，所以接下来详细阐述并发事务会产生的问题。</p>\n<h3 id=\"2-并发事务会产生的问题\"><a href=\"#2-并发事务会产生的问题\" class=\"headerlink\" title=\"2. 并发事务会产生的问题\"></a>2. 并发事务会产生的问题</h3><p>这节我们主要说明并发事务时可能会出现的问题，我们用时间点和事务操作表格的方式来举例。</p>\n<h4 id=\"2-1-丢失更新\"><a href=\"#2-1-丢失更新\" class=\"headerlink\" title=\"2.1 丢失更新\"></a>2.1 丢失更新</h4><h5 id=\"2-1-1-第一类丢失更新\"><a href=\"#2-1-1-第一类丢失更新\" class=\"headerlink\" title=\"2.1.1 第一类丢失更新\"></a>2.1.1 第一类丢失更新</h5><p>定义：A事务<strong>撤销</strong>时，把已经提交的B事务的更新数据覆盖了。</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T2</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T3</td>\n<td>查询账户余额为1000元</td>\n<td></td>\n</tr>\n<tr>\n<td>T4</td>\n<td></td>\n<td>查询账户余额为1000元</td>\n</tr>\n<tr>\n<td>T5</td>\n<td></td>\n<td>存入100元把余额改为1100元</td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td><strong>提交事务</strong></td>\n</tr>\n<tr>\n<td>T7</td>\n<td>取出100元把余额改为900元</td>\n<td></td>\n</tr>\n<tr>\n<td>T8</td>\n<td><strong>撤销事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T9</td>\n<td>余额恢复为1000元（丢失更新）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>以上的示例演示了第一类丢失更新问题，事务B虽然成功了，但是它所做的更新没有被永久存储，这种并发问题是由于完全没有隔离事务造成的。当两个事务更新相同的数据时，如果一个事务被提交，另一个事务却撤销，那么会连同第一个事务所做的更新也被撤销了。（这是绝对不允许出现的事情） 事务A的开始时间和结束时间包含事务B的开始和结束时间,事务A回滚事务的同时,把B的已经提交的事务也回滚的,这是不允许的,这就是第一类丢失更新.</p>\n<h5 id=\"2-1-2-第二类丢失更新\"><a href=\"#2-1-2-第二类丢失更新\" class=\"headerlink\" title=\"2.1.2 第二类丢失更新\"></a>2.1.2 第二类丢失更新</h5><p>定义：A事务<strong>提交</strong>时，把已经提交的B事务的更新数据覆盖了。</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T2</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T3</td>\n<td></td>\n<td>查询账户余额为1000元</td>\n</tr>\n<tr>\n<td>T4</td>\n<td>查询账户余额为1000元</td>\n<td></td>\n</tr>\n<tr>\n<td>T5</td>\n<td></td>\n<td>取出100元把余额改为900元</td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td><strong>提交事务</strong></td>\n</tr>\n<tr>\n<td>T7</td>\n<td>存入100元把余额改为1100</td>\n<td></td>\n</tr>\n<tr>\n<td>T8</td>\n<td><strong>提交事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T9</td>\n<td>余额恢复为1100元（丢失更新）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>第二类丢失更新和第一类的区别实际上就是影响是由A事务的撤销还是提交造成的，它和不可重复读(下面介绍)本质上是同一类并发问题，通常把它看做是不可重复读的一个特例。两个或多个事务查询同一数据。然后都基于自己的查询结果更新数据，这时会造成最后一个提交的更新事务，将覆盖其它已经提交的更新事务。</p>\n<h4 id=\"2-2-脏读\"><a href=\"#2-2-脏读\" class=\"headerlink\" title=\"2.2 脏读\"></a>2.2 脏读</h4><p>定义：读到未提交更新的数据</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T2</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T3</td>\n<td></td>\n<td>查询账户余额为1000元</td>\n</tr>\n<tr>\n<td>T4</td>\n<td></td>\n<td>取出500元把余额改为500元</td>\n</tr>\n<tr>\n<td>T5</td>\n<td>查询账户余额为500元（脏读）</td>\n<td></td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td><strong>撤销事务</strong>，余额恢复为1000元</td>\n</tr>\n<tr>\n<td>T7</td>\n<td>存入100元把余额改为600元</td>\n<td></td>\n</tr>\n<tr>\n<td>T8</td>\n<td><strong>提交事务</strong></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>A事务查询到了B事务未提交的更新数据，A事务依据这个查询结果继续执行相关操作。但是接着B事务撤销了所做的更新，这会导致A事务操作的是脏数据，以上的示例中T5时刻产生了脏读，最终导致A事务提交时账户余额的不正确，可能有人会有疑问，B事务还没有提交或撤销，T5时刻A事务为什么能读到已经改变的数据，这里要说的是，数据表中的数据是实时改变的，事务只是控制数据的最终状态，也就是说如果没有正确的隔离级别，在更新操作语句结束后，即使事务未完成，其他事务就已经可以读取到改变的数据值了。<br><strong>现在为止:所有的数据库都不允许脏读操</strong>，可以用两个Mysql会话试验一下以上的操作，在默认的隔离级别下（REPEATABLE-READ），A事务在T5时刻读取到的余额为1000元，不会是500元。</p>\n<h4 id=\"2-3-不可重复读\"><a href=\"#2-3-不可重复读\" class=\"headerlink\" title=\"2.3 不可重复读\"></a>2.3 不可重复读</h4><p>定义：读到已经提交更新的数据，现象是一个事务范围内两个相同的查询却返回了不同数据。</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T2</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T3</td>\n<td></td>\n<td>查询账户余额为1000元</td>\n</tr>\n<tr>\n<td>T4</td>\n<td>查询账户余额为1000元</td>\n<td></td>\n</tr>\n<tr>\n<td>T5</td>\n<td></td>\n<td>取出100元把余额改为900元</td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td><strong>提交事务</strong></td>\n</tr>\n<tr>\n<td>T7</td>\n<td>查询账户余额为900元（与T4读取的一不一致，不可重复读）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-4-幻读\"><a href=\"#2-4-幻读\" class=\"headerlink\" title=\"2.4 幻读\"></a>2.4 幻读</h4><p>定义：读到已提交插入数据，幻读与不可重复读类似，前者是查询到了另一个事务已提交的新插入数据，而后者是查询到了另一个事务已提交的更新数据。</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T2</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T3</td>\n<td>统计用户Z总存款数为1000元</td>\n<td></td>\n</tr>\n<tr>\n<td>T4</td>\n<td></td>\n<td>新增Z的一个存款账号，存款100元</td>\n</tr>\n<tr>\n<td>T5</td>\n<td></td>\n<td><strong>提交事务</strong></td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>T7</td>\n<td>再次统计用户Z总存款数为1100元（与T4读取的一不一致，幻读）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>A事务第一次查询时，没有问题，第二次查询时查到了B事务已提交的新插入数据，这导致两次查询结果不同。<br><strong>不可重复读和幻读的区别：</strong><br>不可重复读，是指在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。<br>一种更易理解的说法是：在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。</p>\n<p>所谓幻读，是指事务A读取与搜索条件相匹配的若干行。事务B以插入或删除行等方式来修改事务A的结果集，然后再提交。<br>幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检锁范围为只读，这样就避免了幻读。<br>简单来说，幻读是由插入或者删除引起的。</p>\n<p>以上就是数据库并发事务导致的五大问题，总结来说其中两类是更新问题，三类是读问题，数据库是如何避免这种并发事务问题的呢？答案就是通过不同的事务隔离级别，在不同的隔离级别下，并发事务读取数据的结果是不一样的，比如在脏读小节里介绍的，如果是在REPEATABLE-READ隔离级别下，A事务在T5时刻读取是读取不到B事务未提交的数据的。我们需要根据业务的要求，设置不同的隔离级别，在效率和数据安全性中找到平衡点。</p>\n<h3 id=\"3-事务隔离级别\"><a href=\"#3-事务隔离级别\" class=\"headerlink\" title=\"3. 事务隔离级别\"></a>3. 事务隔离级别</h3><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>\n<h4 id=\"3-1-SERIALIZABLE（串行化）\"><a href=\"#3-1-SERIALIZABLE（串行化）\" class=\"headerlink\" title=\"3.1 SERIALIZABLE（串行化）\"></a>3.1 SERIALIZABLE（串行化）</h4><p>当数据库系统使用SERIALIZABLE隔离级别时，一个事务在执行过程中完全看不到其他事务对数据库所做的更新。当两个事务同时操作数据库中相同数据时，如果第一个事务已经在访问该数据，第二个事务只能停下来等待，必须等到第一个事务结束后才能恢复运行。因此这两个事务实际上是串行化方式运行。</p>\n<h4 id=\"3-2-REPEATABLE-READ（可重复读）\"><a href=\"#3-2-REPEATABLE-READ（可重复读）\" class=\"headerlink\" title=\"3.2 REPEATABLE READ（可重复读）\"></a>3.2 REPEATABLE READ（可重复读）</h4><p>当数据库系统使用REPEATABLE READ隔离级别时，一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。</p>\n<h4 id=\"3-3-READ-COMMITTED（读已提交数据）\"><a href=\"#3-3-READ-COMMITTED（读已提交数据）\" class=\"headerlink\" title=\"3.3 READ COMMITTED（读已提交数据）\"></a>3.3 READ COMMITTED（读已提交数据）</h4><p>当数据库系统使用READ COMMITTED隔离级别时，一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，而且还能看到其他事务已经提交的对已有记录的更新。</p>\n<h4 id=\"3-4-READ-UNCOMMITTED（读未提交数据）\"><a href=\"#3-4-READ-UNCOMMITTED（读未提交数据）\" class=\"headerlink\" title=\"3.4 READ UNCOMMITTED（读未提交数据）\"></a>3.4 READ UNCOMMITTED（读未提交数据）</h4><p>当数据库系统使用READ UNCOMMITTED隔离级别时，一个事务在执行过程中可以看到其他事务没有提交的新插入的记录，而且还能看到其他事务没有提交的对已有记录的更新。</p>\n<p>以上的四种隔离级别按从高到底排序，你可能会说，选择SERIALIZABLE，因为它最安全！没错，它是最安全，但它也是最慢的！四种隔离级别的安全性与性能成反比！最安全的性能最差，最不安全的性能最好！</p>\n<h3 id=\"4-隔离级别与并发问题\"><a href=\"#4-隔离级别与并发问题\" class=\"headerlink\" title=\"4. 隔离级别与并发问题\"></a>4. 隔离级别与并发问题</h3><p>通过以上的四种隔离级别的定义，我们已经可以分析出，每个隔离级别可以避免哪些并发问题了，总结一下如下表：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>第一类丢失更新</th>\n<th>第二类丢失更新</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SERIALIZABLE （串行化）</td>\n<td>不允许</td>\n<td>不允许</td>\n<td>不允许</td>\n<td>不允许</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>REPEATABLE READ（可重复读）</td>\n<td>不允许</td>\n<td>不允许</td>\n<td>允许</td>\n<td>不允许</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>READ COMMITTED （读已提交）</td>\n<td>不允许</td>\n<td>允许</td>\n<td>允许</td>\n<td>不允许</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>READ UNCOMMITTED（读未提交）</td>\n<td>允许</td>\n<td>允许</td>\n<td>允许</td>\n<td>不允许</td>\n<td>允许</td>\n</tr>\n</tbody>\n</table>\n<p>我们通过隔离级别的定义很容易自己分析出这张表，比如可重复读隔离级别的定义是一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。所以，在这种隔离级别下，在脏读示例的T5时刻和不可重复读的T7时刻，事务A都是无论事务B是否提交，事务A都是无法读取到事务B对已有记录的更新的，所以不会产生脏读和不可重复读，而又由于这种隔离级别下可以看到其他事务已经提交的新插入记录，自然是无法避免幻读的产生。另外，值得注意的是所有隔离级别都可以避免第一类丢失更新的问题。</p>\n","excerpt":"<p>之前对于数据库事务概念的理解有很多不到位的地方，今天用简单的实例再来阐述一下数据库事务和隔离级别的概念，也方便以后温故而知新。</p>\n<h3 id=\"1-什么是事务\"><a href=\"#1-什么是事务\" class=\"headerlink\" title=\"1. 什么是事务\"></a>1. 什么是事务</h3><p>事务（Transaction）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。例如，银行转账工作：从一个账号扣款并使另一个账号增款，这两个操作要么都执行，要么都不执行。所以，应该把它们看成一个事务。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。<br>我们以Msql数据库的操作为例，再进一步解释一下数据库事务：<br>首先我们用以下命令查看该Mysql会话的事务隔离级别，关于事务隔离级别及其作用，我们在后面的章节中会进行详细介绍，这里只要简单知道数据库可以设置不同的事务隔离级别，不同的隔离级别会对事务的操作产生不同的效果即可。使用以下命令可以查询当前Mysql会话的事务隔离级别，可以看到，Mysql默认的事务隔离级别是REPEATABLE-READ。","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select @@tx_isolation;</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| @@tx_isolation  |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| REPEATABLE-READ |</span><br><span class=\"line\">+-----------------+</span><br></pre></td></tr></table></figure>\n<p>为了用实例来解释事务，我们创建了如下的bank数据表，并插入一条数据，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; describe bank;</span><br><span class=\"line\">+---------+---------------+------+-----+---------+----------------+</span><br><span class=\"line\">| Field   | Type          | Null | Key | Default | Extra          |</span><br><span class=\"line\">+---------+---------------+------+-----+---------+----------------+</span><br><span class=\"line\">| id      | int(11)       | NO   | PRI | NULL    | auto_increment |</span><br><span class=\"line\">| name    | varchar(40)   | NO   |     | NULL    |                |</span><br><span class=\"line\">| balance | decimal(10,2) | YES  |     | NULL    |                |</span><br><span class=\"line\">+---------+---------------+------+-----+---------+----------------+</span><br><span class=\"line\">mysql&gt; select * from bank;</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">| id | name | balance |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">|  3 | fufu | 2000.00 |</span><br><span class=\"line\">+----+------+---------+</span><br></pre></td></tr></table></figure></p>\n<p>使用start transaction命令开启数据库事务，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; start transaction;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>更新id为3的行的balance值为3000.00，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; update bank set balance = 3000 where id = 3;</span><br><span class=\"line\">Query OK, 1 row affected (0.09 sec)</span><br><span class=\"line\">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from bank;</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">| id | name | balance |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">|  3 | fufu | 3000.00 |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>此时我们可以看到，select语句查询到的id为3的行的balance值已经修改为3000.00，接下来我们再尝试插入一条新数据，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; insert into bank (name, balance) values (&apos;melo&apos;, 1000);</span><br><span class=\"line\">Query OK, 1 row affected (0.06 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from bank;</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">| id | name | balance |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">|  3 | fufu | 3000.00 |</span><br><span class=\"line\">|  4 | melo | 1000.00 |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>由于以上的update和insert操作都是在start transaction命令开启事务之后，所以直到事务结束，这些操作都属于同一事务，假设我们在insert操作时产生了错误，可以根据事务的定义得知，这些属于同一事务的所有操作要么都执行要么都不执行，我们可以验证一下，使用rollback命令，模拟事务失败回滚，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; rollback;</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></p>\n<p>此时我们在查询数据库中的所有数据，发现数据恢复到了update命令执行前的状态，id为3的行的balance值等于2000没有变化。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from bank;</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">| id | name | balance |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">|  3 | fufu | 2000.00 |</span><br><span class=\"line\">+----+------+---------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>到此，我们阐述了数据库事务的定义并用简单的Mysql操作说明了事务的操作方式，我们可以总结出数据库事务的生命周期如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">A[数据库的初始状态]--&gt;B[开始事务]</span><br><span class=\"line\">B--&gt;C[执行SQL语句]</span><br><span class=\"line\">C--&gt;E[提交事务]</span><br><span class=\"line\">C--&gt;F[撤销事务]</span><br><span class=\"line\">E--&gt;G[更新后的数据库状态]</span><br><span class=\"line\">F--&gt;A</span><br></pre></td></tr></table></figure></p>\n<p>可以看出事务的边界包括：</p>\n<ul>\n<li>事务的开始边界</li>\n<li>事务的正常结束边界（COMMIT），提交事务，永久保存被事务更新后的数据库状态。</li>\n<li>事务的异常结束边界（ROLLBACK）：撤销事务，使数据库退回到执行事务前的初始状态。</li>\n</ul>\n<p>现在我们回过头来思考一下上述示例，示例中的所有操作都是在一个Mysql会话中进行的，也就是没有其他用户在同时连接数据库进行操作，在这种没有并发会话的使用场景中，无论事务是正常结束还是异常结束，对于该单独用户读取数据不会造成任何影响，因为他的所有操作都是串行的。但是在实际应用场景中，数据库每时每刻都服务于很多会话，假设用户A的事务A开始后更新了数据库数据，此时用户B开始读取该数据，用户B将会读取到了新的值。但是如果紧接着事务A在下一条SQL语句操作时产生了错误，将事务A回滚了，那么用户B读取到的数据就是错误的无效数据了。这只是数据库事务在并发环境下会产生的一个简单的问题，所以接下来详细阐述并发事务会产生的问题。</p>\n<h3 id=\"2-并发事务会产生的问题\"><a href=\"#2-并发事务会产生的问题\" class=\"headerlink\" title=\"2. 并发事务会产生的问题\"></a>2. 并发事务会产生的问题</h3><p>这节我们主要说明并发事务时可能会出现的问题，我们用时间点和事务操作表格的方式来举例。</p>\n<h4 id=\"2-1-丢失更新\"><a href=\"#2-1-丢失更新\" class=\"headerlink\" title=\"2.1 丢失更新\"></a>2.1 丢失更新</h4><h5 id=\"2-1-1-第一类丢失更新\"><a href=\"#2-1-1-第一类丢失更新\" class=\"headerlink\" title=\"2.1.1 第一类丢失更新\"></a>2.1.1 第一类丢失更新</h5><p>定义：A事务<strong>撤销</strong>时，把已经提交的B事务的更新数据覆盖了。</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T2</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T3</td>\n<td>查询账户余额为1000元</td>\n<td></td>\n</tr>\n<tr>\n<td>T4</td>\n<td></td>\n<td>查询账户余额为1000元</td>\n</tr>\n<tr>\n<td>T5</td>\n<td></td>\n<td>存入100元把余额改为1100元</td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td><strong>提交事务</strong></td>\n</tr>\n<tr>\n<td>T7</td>\n<td>取出100元把余额改为900元</td>\n<td></td>\n</tr>\n<tr>\n<td>T8</td>\n<td><strong>撤销事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T9</td>\n<td>余额恢复为1000元（丢失更新）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>以上的示例演示了第一类丢失更新问题，事务B虽然成功了，但是它所做的更新没有被永久存储，这种并发问题是由于完全没有隔离事务造成的。当两个事务更新相同的数据时，如果一个事务被提交，另一个事务却撤销，那么会连同第一个事务所做的更新也被撤销了。（这是绝对不允许出现的事情） 事务A的开始时间和结束时间包含事务B的开始和结束时间,事务A回滚事务的同时,把B的已经提交的事务也回滚的,这是不允许的,这就是第一类丢失更新.</p>\n<h5 id=\"2-1-2-第二类丢失更新\"><a href=\"#2-1-2-第二类丢失更新\" class=\"headerlink\" title=\"2.1.2 第二类丢失更新\"></a>2.1.2 第二类丢失更新</h5><p>定义：A事务<strong>提交</strong>时，把已经提交的B事务的更新数据覆盖了。</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T2</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T3</td>\n<td></td>\n<td>查询账户余额为1000元</td>\n</tr>\n<tr>\n<td>T4</td>\n<td>查询账户余额为1000元</td>\n<td></td>\n</tr>\n<tr>\n<td>T5</td>\n<td></td>\n<td>取出100元把余额改为900元</td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td><strong>提交事务</strong></td>\n</tr>\n<tr>\n<td>T7</td>\n<td>存入100元把余额改为1100</td>\n<td></td>\n</tr>\n<tr>\n<td>T8</td>\n<td><strong>提交事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T9</td>\n<td>余额恢复为1100元（丢失更新）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>第二类丢失更新和第一类的区别实际上就是影响是由A事务的撤销还是提交造成的，它和不可重复读(下面介绍)本质上是同一类并发问题，通常把它看做是不可重复读的一个特例。两个或多个事务查询同一数据。然后都基于自己的查询结果更新数据，这时会造成最后一个提交的更新事务，将覆盖其它已经提交的更新事务。</p>\n<h4 id=\"2-2-脏读\"><a href=\"#2-2-脏读\" class=\"headerlink\" title=\"2.2 脏读\"></a>2.2 脏读</h4><p>定义：读到未提交更新的数据</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T2</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T3</td>\n<td></td>\n<td>查询账户余额为1000元</td>\n</tr>\n<tr>\n<td>T4</td>\n<td></td>\n<td>取出500元把余额改为500元</td>\n</tr>\n<tr>\n<td>T5</td>\n<td>查询账户余额为500元（脏读）</td>\n<td></td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td><strong>撤销事务</strong>，余额恢复为1000元</td>\n</tr>\n<tr>\n<td>T7</td>\n<td>存入100元把余额改为600元</td>\n<td></td>\n</tr>\n<tr>\n<td>T8</td>\n<td><strong>提交事务</strong></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>A事务查询到了B事务未提交的更新数据，A事务依据这个查询结果继续执行相关操作。但是接着B事务撤销了所做的更新，这会导致A事务操作的是脏数据，以上的示例中T5时刻产生了脏读，最终导致A事务提交时账户余额的不正确，可能有人会有疑问，B事务还没有提交或撤销，T5时刻A事务为什么能读到已经改变的数据，这里要说的是，数据表中的数据是实时改变的，事务只是控制数据的最终状态，也就是说如果没有正确的隔离级别，在更新操作语句结束后，即使事务未完成，其他事务就已经可以读取到改变的数据值了。<br><strong>现在为止:所有的数据库都不允许脏读操</strong>，可以用两个Mysql会话试验一下以上的操作，在默认的隔离级别下（REPEATABLE-READ），A事务在T5时刻读取到的余额为1000元，不会是500元。</p>\n<h4 id=\"2-3-不可重复读\"><a href=\"#2-3-不可重复读\" class=\"headerlink\" title=\"2.3 不可重复读\"></a>2.3 不可重复读</h4><p>定义：读到已经提交更新的数据，现象是一个事务范围内两个相同的查询却返回了不同数据。</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T2</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T3</td>\n<td></td>\n<td>查询账户余额为1000元</td>\n</tr>\n<tr>\n<td>T4</td>\n<td>查询账户余额为1000元</td>\n<td></td>\n</tr>\n<tr>\n<td>T5</td>\n<td></td>\n<td>取出100元把余额改为900元</td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td><strong>提交事务</strong></td>\n</tr>\n<tr>\n<td>T7</td>\n<td>查询账户余额为900元（与T4读取的一不一致，不可重复读）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-4-幻读\"><a href=\"#2-4-幻读\" class=\"headerlink\" title=\"2.4 幻读\"></a>2.4 幻读</h4><p>定义：读到已提交插入数据，幻读与不可重复读类似，前者是查询到了另一个事务已提交的新插入数据，而后者是查询到了另一个事务已提交的更新数据。</p>\n<table>\n<thead>\n<tr>\n<th>时间点</th>\n<th>事务A</th>\n<th>事务B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T1</td>\n<td></td>\n<td><strong>开始事务</strong></td>\n</tr>\n<tr>\n<td>T2</td>\n<td><strong>开始事务</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>T3</td>\n<td>统计用户Z总存款数为1000元</td>\n<td></td>\n</tr>\n<tr>\n<td>T4</td>\n<td></td>\n<td>新增Z的一个存款账号，存款100元</td>\n</tr>\n<tr>\n<td>T5</td>\n<td></td>\n<td><strong>提交事务</strong></td>\n</tr>\n<tr>\n<td>T6</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>T7</td>\n<td>再次统计用户Z总存款数为1100元（与T4读取的一不一致，幻读）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>A事务第一次查询时，没有问题，第二次查询时查到了B事务已提交的新插入数据，这导致两次查询结果不同。<br><strong>不可重复读和幻读的区别：</strong><br>不可重复读，是指在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。<br>一种更易理解的说法是：在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。</p>\n<p>所谓幻读，是指事务A读取与搜索条件相匹配的若干行。事务B以插入或删除行等方式来修改事务A的结果集，然后再提交。<br>幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检锁范围为只读，这样就避免了幻读。<br>简单来说，幻读是由插入或者删除引起的。</p>\n<p>以上就是数据库并发事务导致的五大问题，总结来说其中两类是更新问题，三类是读问题，数据库是如何避免这种并发事务问题的呢？答案就是通过不同的事务隔离级别，在不同的隔离级别下，并发事务读取数据的结果是不一样的，比如在脏读小节里介绍的，如果是在REPEATABLE-READ隔离级别下，A事务在T5时刻读取是读取不到B事务未提交的数据的。我们需要根据业务的要求，设置不同的隔离级别，在效率和数据安全性中找到平衡点。</p>\n<h3 id=\"3-事务隔离级别\"><a href=\"#3-事务隔离级别\" class=\"headerlink\" title=\"3. 事务隔离级别\"></a>3. 事务隔离级别</h3><p>SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>\n<h4 id=\"3-1-SERIALIZABLE（串行化）\"><a href=\"#3-1-SERIALIZABLE（串行化）\" class=\"headerlink\" title=\"3.1 SERIALIZABLE（串行化）\"></a>3.1 SERIALIZABLE（串行化）</h4><p>当数据库系统使用SERIALIZABLE隔离级别时，一个事务在执行过程中完全看不到其他事务对数据库所做的更新。当两个事务同时操作数据库中相同数据时，如果第一个事务已经在访问该数据，第二个事务只能停下来等待，必须等到第一个事务结束后才能恢复运行。因此这两个事务实际上是串行化方式运行。</p>\n<h4 id=\"3-2-REPEATABLE-READ（可重复读）\"><a href=\"#3-2-REPEATABLE-READ（可重复读）\" class=\"headerlink\" title=\"3.2 REPEATABLE READ（可重复读）\"></a>3.2 REPEATABLE READ（可重复读）</h4><p>当数据库系统使用REPEATABLE READ隔离级别时，一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。</p>\n<h4 id=\"3-3-READ-COMMITTED（读已提交数据）\"><a href=\"#3-3-READ-COMMITTED（读已提交数据）\" class=\"headerlink\" title=\"3.3 READ COMMITTED（读已提交数据）\"></a>3.3 READ COMMITTED（读已提交数据）</h4><p>当数据库系统使用READ COMMITTED隔离级别时，一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，而且还能看到其他事务已经提交的对已有记录的更新。</p>\n<h4 id=\"3-4-READ-UNCOMMITTED（读未提交数据）\"><a href=\"#3-4-READ-UNCOMMITTED（读未提交数据）\" class=\"headerlink\" title=\"3.4 READ UNCOMMITTED（读未提交数据）\"></a>3.4 READ UNCOMMITTED（读未提交数据）</h4><p>当数据库系统使用READ UNCOMMITTED隔离级别时，一个事务在执行过程中可以看到其他事务没有提交的新插入的记录，而且还能看到其他事务没有提交的对已有记录的更新。</p>\n<p>以上的四种隔离级别按从高到底排序，你可能会说，选择SERIALIZABLE，因为它最安全！没错，它是最安全，但它也是最慢的！四种隔离级别的安全性与性能成反比！最安全的性能最差，最不安全的性能最好！</p>\n<h3 id=\"4-隔离级别与并发问题\"><a href=\"#4-隔离级别与并发问题\" class=\"headerlink\" title=\"4. 隔离级别与并发问题\"></a>4. 隔离级别与并发问题</h3><p>通过以上的四种隔离级别的定义，我们已经可以分析出，每个隔离级别可以避免哪些并发问题了，总结一下如下表：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>第一类丢失更新</th>\n<th>第二类丢失更新</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SERIALIZABLE （串行化）</td>\n<td>不允许</td>\n<td>不允许</td>\n<td>不允许</td>\n<td>不允许</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>REPEATABLE READ（可重复读）</td>\n<td>不允许</td>\n<td>不允许</td>\n<td>允许</td>\n<td>不允许</td>\n<td>不允许</td>\n</tr>\n<tr>\n<td>READ COMMITTED （读已提交）</td>\n<td>不允许</td>\n<td>允许</td>\n<td>允许</td>\n<td>不允许</td>\n<td>允许</td>\n</tr>\n<tr>\n<td>READ UNCOMMITTED（读未提交）</td>\n<td>允许</td>\n<td>允许</td>\n<td>允许</td>\n<td>不允许</td>\n<td>允许</td>\n</tr>\n</tbody>\n</table>\n<p>我们通过隔离级别的定义很容易自己分析出这张表，比如可重复读隔离级别的定义是一个事务在执行过程中可以看到其他事务已经提交的新插入的记录，但是不能看到其他事务对已有记录的更新。所以，在这种隔离级别下，在脏读示例的T5时刻和不可重复读的T7时刻，事务A都是无论事务B是否提交，事务A都是无法读取到事务B对已有记录的更新的，所以不会产生脏读和不可重复读，而又由于这种隔离级别下可以看到其他事务已经提交的新插入记录，自然是无法避免幻读的产生。另外，值得注意的是所有隔离级别都可以避免第一类丢失更新的问题。</p>"},{"title":"Concrete Jungle.","date":"2017-07-20T10:13:00.000Z","_content":"{% qnimg concrete.jpg %}","source":"_posts/Concrete Jungle.md","raw":"---\ntitle: Concrete Jungle.\ndate: 2017-07-20 18:13:00\ncategories: 心情随笔\n---\n{% qnimg concrete.jpg %}","slug":"Concrete Jungle","published":1,"updated":"2017-07-25T09:01:40.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5jf41wf0000w8hkmkq9swn6","content":"<img src=\"http://otbsz8hna.bkt.clouddn.com/images/concrete.jpg\">","excerpt":"","more":"<img src=\"http://otbsz8hna.bkt.clouddn.com/images/concrete.jpg\">"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5j32wr90001rkhkl8zmj1t4","category_id":"cj5j32wrf0004rkhkabuvanxf","_id":"cj5j32wrn000arkhkmo4v26gd"},{"post_id":"cj5j32wrb0002rkhkwq2mcqq7","category_id":"cj5j32wrm0008rkhkyn1ftwby","_id":"cj5j32wro000erkhkvj4ozef5"},{"post_id":"cj5j32wrf0005rkhk6hos4kg5","category_id":"cj5j32wrn000crkhkgzj3oavs","_id":"cj5j32wro000hrkhko6sc7vuc"},{"post_id":"cj5j32wrk0006rkhkmzznv5gc","category_id":"cj5j32wro000frkhktbdddu3b","_id":"cj5j32wrp000irkhkx9xfhgml"},{"post_id":"cj5j32wwa000jrkhksyxqfv6k","category_id":"cj5j32wwh000nrkhkq4k94nal","_id":"cj5j32wwk000srkhkc3mzrcbv"},{"post_id":"cj5jf41wf0000w8hkmkq9swn6","category_id":"cj5j32wro000frkhktbdddu3b","_id":"cj5jf41wp0004w8hk2n1ph4p6"}],"PostTag":[{"post_id":"cj5j32wr90001rkhkl8zmj1t4","tag_id":"cj5j32wrc0003rkhku8pl21gy","_id":"cj5j32wrm0009rkhk01vg37um"},{"post_id":"cj5j32wrb0002rkhkwq2mcqq7","tag_id":"cj5j32wrl0007rkhkq6ca2b31","_id":"cj5j32wro000drkhk9d7b6rqj"},{"post_id":"cj5j32wrf0005rkhk6hos4kg5","tag_id":"cj5j32wrn000brkhkk3jkyjp8","_id":"cj5j32wro000grkhkkil64xd7"},{"post_id":"cj5j32wwa000jrkhksyxqfv6k","tag_id":"cj5j32wwg000mrkhkwdmn8b00","_id":"cj5j32wwk000trkhkzmoms3wl"},{"post_id":"cj5j32wwa000jrkhksyxqfv6k","tag_id":"cj5j32wwj000qrkhk9tvl0ci8","_id":"cj5j32wwl000urkhkoitpxwkq"}],"Tag":[{"name":"单例","_id":"cj5j32wrc0003rkhku8pl21gy"},{"name":"特殊字符","_id":"cj5j32wrl0007rkhkq6ca2b31"},{"name":"锁","_id":"cj5j32wrn000brkhkk3jkyjp8"},{"name":"数据库","_id":"cj5j32wwg000mrkhkwdmn8b00"},{"name":"事务","_id":"cj5j32wwj000qrkhk9tvl0ci8"}]}}